{
  "hash": "0341de373f4512842d1cb746a018be79",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and times with lubridate\"\ndate: 2024-05-17\nexecute: \n  echo: true\n  freeze: auto\ncategories: [R, beginner]\n---\n\n::: {.cell layout-align=\"left\"}\nNo feedback found for this session\n:::\n\n\n\n# Slides\n\n[Slides](Dates and Times with Lubridate.pdf)\n\n# Session content\n\n## Word of warning\n\n-   dates and times are hard everywhere\n-   R is no exception\n-   this session is a beginner's guide to [lubridate](https://cran.r-project.org/web/packages/lubridate/index.html)\n    -   not the only way of dealing with dates\n    -   not always the best\n    -   on balance the most consistent, and least quirky tools for dates\n\n## This session\n\n-   beginner-friendly\n-   focus on core parsing, get/set, and rounding functions\n-   lots on dates, a bit of date-times, no times\n\n\n\n### Resources\n\n\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n\n-   [Lubridate cheatsheet](https://rstudio.github.io/cheatsheets/html/lubridate.html)\n-   [R4DS 2e chapter on dates and times](https://r4ds.hadley.nz/datetimes)\n-   [quick primer on ISO8601](https://en.wikipedia.org/wiki/ISO_8601)\n\n## R dates\n\n-   **days** since 1970-01-01\n\n\n\n\n\n```{.r .cell-code}\nas_date(0)\n```\n\n[1] \"1970-01-01\"\n\n\n## R dates\n\n\n\n```{.r .cell-code}\nas_date(19860)\n```\n\n[1] \"2024-05-17\"\n\n```{.r .cell-code}\nas_date(1:5)\n```\n\n[1] \"1970-01-02\" \"1970-01-03\" \"1970-01-04\" \"1970-01-05\" \"1970-01-06\"\n\n```{.r .cell-code}\nclass(as_date(0))\n```\n\n[1] \"Date\"\n\n\n# R date-times\n\n-   **seconds** since 1970-01-01 00:00:00 UTC\n\n\n\n\n\n```{.r .cell-code}\nas_datetime(0)\n```\n\n[1] \"1970-01-01 UTC\"\n\n```{.r .cell-code}\nas_datetime(1715935369)\n```\n\n[1] \"2024-05-17 08:42:49 UTC\"\n\n```{.r .cell-code}\nas_datetime(0:5)\n```\n\n[1] \"1970-01-01 00:00:00 UTC\" \"1970-01-01 00:00:01 UTC\"\n[3] \"1970-01-01 00:00:02 UTC\" \"1970-01-01 00:00:03 UTC\"\n[5] \"1970-01-01 00:00:04 UTC\" \"1970-01-01 00:00:05 UTC\"\n\n```{.r .cell-code}\nclass(as_datetime(0))\n```\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\n## Famously...\n\n\n\n```{.r .cell-code}\nas_datetime(2 ^ 31-1) # 32 bit signed int\n```\n\n[1] \"2038-01-19 03:14:07 UTC\"\n\n\n## Parsing dates is important\n\n-   most functions that accept dates (like ggplot) will mis-behave if you feed them date-shaped-words\n    -   e.g. alphabetically-ordered dates\n-   we also want to be able to calculate with dates\n\n## Couple of fun intro functions\n\n\n\n```{.r .cell-code}\ntoday()\n```\n\n[1] \"2024-09-05\"\n\n```{.r .cell-code}\ndate_decimal(2024.37534)\n```\n\n[1] \"2024-05-17 08:59:11 UTC\"\n\n```{.r .cell-code}\nnow()\n```\n\n[1] \"2024-09-05 11:23:15 BST\"\n\n```{.r .cell-code}\nnow(\"Japan\")\n```\n\n[1] \"2024-09-05 19:23:15 JST\"\n\n```{.r .cell-code}\nrandom_zone <- sample(OlsonNames(), 1)\ncat(paste(\"The date-time in\", random_zone, \"is\", now(sample(OlsonNames(), 1))))\n```\n\nThe date-time in Etc/GMT-14 is 2024-09-05 06:23:15.647358\n\n\n## Parsing\n\n-   `as_date()` is fine assuming you have your date as a number of days\n-   but usually, we'll need to **parse** our dates\n\n\n\n\n\n```{.r .cell-code}\nas_date(45429) # excel-format 1900 date\n```\n\n[1] \"2094-05-19\"\n\n```{.r .cell-code}\nas_date(45429 - 25569) # dirty but effective\n```\n\n[1] \"2024-05-17\"\n\n```{.r .cell-code}\nas_date(45429, origin = \"1899-12-30\") # better\n```\n\n[1] \"2024-05-17\"\n\n\n## Parsing\n\n-   more often, we'll be taking human-readable dates and parsing them\n-   that's a pain, because there are loads of inconsistent ways of representing dates\n-   worse, lots of dates are ambiguous (5/6/24 and 6/5/24 might refer to the same day)\n\n\n\n\n\n```{.r .cell-code}\ndate_input <- c(\"17/5/24\", \"2024-05-17\", \"Friday 17th May 2024\", \"17*May*24\", \"5/17/2024\" )\n\nas_date(date_input) # as_date expects ISO-8601ish dates\n```\n\n[1] \"2017-05-24\" \"2024-05-17\" NA           \"2017-05-24\" NA          \n\n```{.r .cell-code}\n# one correct, two silently incorrent, two NAs\n```\n\n\n## parse_date_time\n\n\n\n```{.r .cell-code}\nparse_date_time(date_input, orders = \"ymd\")\n```\n\n[1] \"2017-05-24 UTC\" \"2024-05-17 UTC\" NA               \"2017-05-24 UTC\"\n[5] NA              \n\n```{.r .cell-code}\nparse_date_time(date_input, orders = c(\"dmy\", \"ymd\", \"dmy\", \"dmy\", \"mdy\"))\n```\n\n[1] \"2024-05-17 UTC\" \"2024-05-17 UTC\" \"2024-05-17 UTC\" \"2024-05-17 UTC\"\n[5] \"2024-05-17 UTC\"\n\n\n## dmy and co\n\n-   you can also use the orders (like dmy) as standalone parsing functions:\n\n\n\n\n\n```{.r .cell-code}\ndmy(date_input[c(1,3,4)])\n```\n\n[1] \"2024-05-17\" \"2024-05-17\" \"2024-05-17\"\n\n```{.r .cell-code}\nymd_hms(\"2024-05/17 9-05-01\")\n```\n\n[1] \"2024-05-17 09:05:01 UTC\"\n\n\n## So you can make dates/date-times. So what?\n\n\n\n```{.r .cell-code}\ndate(now())\n```\n\n[1] \"2024-09-05\"\n\n```{.r .cell-code}\nyear(today())\n```\n\n[1] 2024\n\n```{.r .cell-code}\nleap_year(today())\n```\n\n[1] TRUE\n\n```{.r .cell-code}\nquarter(today())\n```\n\n[1] 3\n\n```{.r .cell-code}\nsemester(today())\n```\n\n[1] 2\n\n```{.r .cell-code}\nsemester(today(), with_year = T)\n```\n\n[1] 2024.2\n\n\n## Months and weeks\n\n\n\n```{.r .cell-code}\nmonth(today())\n```\n\n[1] 9\n\n```{.r .cell-code}\nmonth(today(), label = T)\n```\n\n[1] Sep\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n\n```{.r .cell-code}\nweek(today())\n```\n\n[1] 36\n\n```{.r .cell-code}\nepiweek(today()) # special ways of counting weeks. See  https://en.wikipedia.org/wiki/ISO_week_date and https://www.cmmcp.org/mosquito-surveillance-data/pages/epi-week-calendars-2008-2024\n```\n\n[1] 36\n\n\n## Days\n\n\n\n```{.r .cell-code}\nday(today())\n```\n\n[1] 5\n\n```{.r .cell-code}\nwday(today())\n```\n\n[1] 5\n\n```{.r .cell-code}\nqday(today())\n```\n\n[1] 67\n\n\n## Hour and minute\n\n\n\n```{.r .cell-code}\nhour(now())\n```\n\n[1] 11\n\n```{.r .cell-code}\nminute(now())\n```\n\n[1] 23\n\n```{.r .cell-code}\nam(now())\n```\n\n[1] TRUE\n\n```{.r .cell-code}\ndst(now()) \n```\n\n[1] TRUE\n\n\n## Set\n\n\n\n```{.r .cell-code}\nupdate(now(), hour = 11, minute = 0, second = 0) # nominal finish time today\n```\n\n[1] \"2024-09-05 11:00:00 BST\"\n\n\n\n\n-   or, more generally:\n\n\n\n\n\n```{.r .cell-code}\ntest_date <- dmy(\"05/06/23\")\nday(test_date)\n```\n\n[1] 5\n\n```{.r .cell-code}\nday(test_date) <- 11\ntest_date\n```\n\n[1] \"2023-06-11\"\n\n\n# Round\n\n\n\n```{.r .cell-code}\nfloor_date(today(), unit = \"week\")\n```\n\n[1] \"2024-09-01\"\n\n```{.r .cell-code}\nround_date(today(), unit = \"week\")\n```\n\n[1] \"2024-09-08\"\n\n```{.r .cell-code}\nceiling_date(today(), unit = \"month\")\n```\n\n[1] \"2024-10-01\"\n\n```{.r .cell-code}\nrollback(today()) # last day of previous month\n```\n\n[1] \"2024-08-31\"\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}