{
  "hash": "db99fa10ada46f726be8dcf09b01c492",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"We ❤️ janitor\"\nauthor: \n  - id: 1\n    name: Susanna Kirk\n    email: Susanna.Kirk@nhs.scot\n    affiliations: NHS Fife\n  - id: 2\n    name: Brendan Clarke\n    email: brendan.clarke2@nhs.scot\n    affiliations: NHS Education for Scotland\nexecute: \n  echo: true\n  output: true\n  freeze: auto\ncategories: [R, intermediate]\n---\n\n\n\n## Headline\n\n+ Janitor is a toolkit for tidying data\n+ both input-focused and output-focused\n+ excellent balance between diligence and laziness\n\n## Setup\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\nlibrary(readxl)\nlibrary(dplyr)\n\ntest_df <- as.data.frame(matrix(ncol = 6))\nnames(test_df) <- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n\ntest_df |>\n  clean_names(case = \"upper_lower\") |>\n  select(FIRSTname)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  FIRSTname\n1        NA\n```\n\n\n:::\n:::\n\n\n## `clean_names`\n\n`clean_names` allows you to convert ugly column names into standardised, syntactic names. You can also specfiy the case, or bulk-tweak the names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_names(test_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  first_name abc percent_successful_2009 repeat_value repeat_value_2  x\n1         NA  NA                      NA           NA             NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\nclean_names(test_df, case = \"screaming_snake\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  FIRST_NAME ABC PERCENT_SUCCESSFUL_2009 REPEAT_VALUE REPEAT_VALUE_2  X\n1         NA  NA                      NA           NA             NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\nclean_names(test_df, case = \"big_camel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  FirstName Abc PercentSuccessful2009 RepeatValue RepeatValue_2  X\n1        NA  NA                    NA          NA            NA NA\n```\n\n\n:::\n\n```{.r .cell-code}\ntest_df %>%\n  clean_names(prefix = \"a_prefix\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a_prefixfirst_name a_prefixabc a_prefixpercent_successful_2009\n1                 NA          NA                              NA\n  a_prefixrepeat_value a_prefixrepeat_value_2 a_prefixx\n1                   NA                     NA        NA\n```\n\n\n:::\n:::\n\n\n## `compare_df_cols`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\ncompare_df_cols(penguins,penguins_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           column_name penguins penguins_raw\n1        bill_depth_mm  numeric         <NA>\n2       bill_length_mm  numeric         <NA>\n3        Body Mass (g)     <NA>      numeric\n4          body_mass_g  integer         <NA>\n5    Clutch Completion     <NA>    character\n6             Comments     <NA>    character\n7    Culmen Depth (mm)     <NA>      numeric\n8   Culmen Length (mm)     <NA>      numeric\n9             Date Egg     <NA>         Date\n10   Delta 13 C (o/oo)     <NA>      numeric\n11   Delta 15 N (o/oo)     <NA>      numeric\n12 Flipper Length (mm)     <NA>      numeric\n13   flipper_length_mm  integer         <NA>\n14       Individual ID     <NA>    character\n15              island   factor         <NA>\n16              Island     <NA>    character\n17              Region     <NA>    character\n18       Sample Number     <NA>      numeric\n19                 sex   factor         <NA>\n20                 Sex     <NA>    character\n21             species   factor         <NA>\n22             Species     <NA>    character\n23               Stage     <NA>    character\n24           studyName     <NA>    character\n25                year  integer         <NA>\n```\n\n\n:::\n:::\n\n\n## `warnings`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1 <- readxl::read_excel(\"data/JanitorDataExample.xlsx\", .name_repair = make_clean_names)\n\n# warnings switched off, otherwise we'd have literally hundreds of warnings here!\n\nmake_clean_names(c(\"1thing\", \"some opther thign\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x1thing\"           \"some_opther_thign\"\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(Data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 503\nColumns: 7\n$ id               <dbl> 100507, 104088, 105279, 105459, 108894, 109204, 10962…\n$ gender           <chr> \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Ma…\n$ date_of_event_1  <dbl> 44572, 44216, 44172, 44496, 44973, 45099, 44350, 4466…\n$ date_of_event_2  <dbl> 44535, 44089, 45239, 43872, 45239, 44236, 44981, 4386…\n$ location         <chr> \"Hospital\", \"Hospital\", \"Hospital\", \"Home\", \"Home\", \"…\n$ diagnosis_code_1 <chr> \"T848\", \"G992\", \"J81X\", \"R55X\", \"J459\", \"K851\", \"J441…\n$ attendances      <dbl> 3, 2, 4, 2, 2, 4, 2, 3, 1, 3, 3, 2, 3, 4, 3, 4, 4, 4,…\n```\n\n\n:::\n:::\n\n\n\n## `clean_names` again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1_clean <- Data1 |>\n  clean_names() |>\n  mutate(across(contains(\"date\"),\n         excel_numeric_to_date)) |>\n  mutate(Year = lubridate::year(date_of_event_1))\n\nData1_clean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 503 × 8\n       id gender date_of_event_1 date_of_event_2 location diagnosis_code_1\n    <dbl> <chr>  <date>          <date>          <chr>    <chr>           \n 1 100507 Male   2022-01-11      2021-12-05      Hospital T848            \n 2 104088 Male   2021-01-20      2020-09-15      Hospital G992            \n 3 105279 Female 2020-12-07      2023-11-09      Hospital J81X            \n 4 105459 Male   2021-10-27      2020-02-11      Home     R55X            \n 5 108894 Male   2023-02-16      2023-11-09      Home     J459            \n 6 109204 Male   2023-06-22      2021-02-09      Home     K851            \n 7 109624 Male   2021-06-03      2023-02-24      Home     J441            \n 8 111454 Male   2022-04-11      2020-02-07      Home     E162            \n 9 113892 Male   2020-04-26      2023-03-06      Home     I279            \n10 114110 Male   2021-04-04      2021-05-06      Hospital M798            \n# ℹ 493 more rows\n# ℹ 2 more variables: attendances <dbl>, Year <dbl>\n```\n\n\n:::\n:::\n\n\n## `get_dupes`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1_clean |>\n  get_dupes(contains(\"date\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  date_of_event_1 date_of_event_2 dupe_count     id gender location\n  <date>          <date>               <int>  <dbl> <chr>  <chr>   \n1 2021-10-09      2021-08-20               2 400760 Female Hospital\n2 2021-10-09      2021-08-20               2 400760 Female Hospital\n3 2022-04-04      2021-11-08               2 450284 Female Hospital\n4 2022-04-04      2021-11-08               2 450284 Female Hospital\n5 2023-06-29      2020-03-23               2 823894 Male   Home    \n6 2023-06-29      2020-03-23               2 823894 Male   Home    \n# ℹ 3 more variables: diagnosis_code_1 <chr>, attendances <dbl>, Year <dbl>\n```\n\n\n:::\n:::\n\n\n## `distinct`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1_clean_distinct <- distinct(Data1_clean)\n\nData1_clean_distinct\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 8\n       id gender date_of_event_1 date_of_event_2 location diagnosis_code_1\n    <dbl> <chr>  <date>          <date>          <chr>    <chr>           \n 1 100507 Male   2022-01-11      2021-12-05      Hospital T848            \n 2 104088 Male   2021-01-20      2020-09-15      Hospital G992            \n 3 105279 Female 2020-12-07      2023-11-09      Hospital J81X            \n 4 105459 Male   2021-10-27      2020-02-11      Home     R55X            \n 5 108894 Male   2023-02-16      2023-11-09      Home     J459            \n 6 109204 Male   2023-06-22      2021-02-09      Home     K851            \n 7 109624 Male   2021-06-03      2023-02-24      Home     J441            \n 8 111454 Male   2022-04-11      2020-02-07      Home     E162            \n 9 113892 Male   2020-04-26      2023-03-06      Home     I279            \n10 114110 Male   2021-04-04      2021-05-06      Hospital M798            \n# ℹ 490 more rows\n# ℹ 2 more variables: attendances <dbl>, Year <dbl>\n```\n\n\n:::\n:::\n\n\n## `tabyl` / `adorn`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n gender   n percent valid_percent\n Female 285   0.570     0.5711423\n   Male 214   0.428     0.4288577\n   <NA>   1   0.002            NA\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(gender, show_na = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n gender   n   percent\n Female 285 0.5711423\n   Male 214 0.4288577\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(gender, location, Year, show_na = F) # excel pivot\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`2020`\n gender Home Hospital\n Female   34       33\n   Male   24       25\n\n$`2021`\n gender Home Hospital\n Female   24       48\n   Male   28       22\n\n$`2022`\n gender Home Hospital\n Female   35       35\n   Male   22       30\n\n$`2023`\n gender Home Hospital\n Female   37       39\n   Male   25       38\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(gender) |>\n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tabyl\"      \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(Year,gender, show_na = F) |>\n  adorn_totals(\"row\") |>\n  adorn_percentages(\"row\") |>\n  adorn_pct_formatting() |>\n  adorn_ns() |>\n  adorn_title(\"combined\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Year/gender      Female        Male\n        2020 57.8%  (67) 42.2%  (49)\n        2021 59.0%  (72) 41.0%  (50)\n        2022 57.4%  (70) 42.6%  (52)\n        2023 54.7%  (76) 45.3%  (63)\n       Total 57.1% (285) 42.9% (214)\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(Year,gender,show_na = F) |>\n  adorn_totals(\"row\") |>\n  adorn_percentages(\"row\") |>\n  adorn_pct_formatting() |>\n  adorn_ns() |>\n  # adorn_title(\"combined\") |>\n  mutate(Year = paste(\"The year was\", Year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               Year      Female        Male\n  The year was 2020 57.8%  (67) 42.2%  (49)\n  The year was 2021 59.0%  (72) 41.0%  (50)\n  The year was 2022 57.4%  (70) 42.6%  (52)\n  The year was 2023 54.7%  (76) 45.3%  (63)\n The year was Total 57.1% (285) 42.9% (214)\n```\n\n\n:::\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(Year,gender,show_na = F) |>\n  adorn_totals(\"row\") |>\n  adorn_percentages(\"row\") |>\n  adorn_pct_formatting() |>\n  adorn_ns(position = \"front\") |>\n  adorn_title(\"combined\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Year/gender      Female        Male\n        2020  67 (57.8%)  49 (42.2%)\n        2021  72 (59.0%)  50 (41.0%)\n        2022  70 (57.4%)  52 (42.6%)\n        2023  76 (54.7%)  63 (45.3%)\n       Total 285 (57.1%) 214 (42.9%)\n```\n\n\n:::\n:::\n\n\n## group_by with `tabyl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  group_by(Year,gender) |>\n  summarise(Attendances = n()) |>\n  filter(!is.na(Year)) |>\n  tidyr::pivot_wider(names_from = gender, values_from = Attendances) |>\n  adorn_totals(c(\"row\",\"col\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Year Female Male Total\n  2020     67   49   116\n  2021     72   50   122\n  2022     70   52   122\n  2023     76   63   139\n Total    285  214   499\n```\n\n\n:::\n:::\n\n\n\n## `chisq.test`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData1_clean_distinct |>\n  tabyl(attendances,location,show_na = F) |>\n  chisq.test()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test\n\ndata:  tabyl(Data1_clean_distinct, attendances, location, show_na = F)\nX-squared = 1.9866, df = 3, p-value = 0.5752\n```\n\n\n:::\n:::\n\n\n## `chisq.test`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitanic <- data.frame(Died  = c(122,167,528,673),\n                  Survived  = c(203,118,178,212),\n                  row.names = c(\"1st class\", \"2nd class\", \"3rd class\", \"crew\"))\n\nchisq.test(titanic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's Chi-squared test\n\ndata:  titanic\nX-squared = 190.4, df = 3, p-value < 2.2e-16\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}