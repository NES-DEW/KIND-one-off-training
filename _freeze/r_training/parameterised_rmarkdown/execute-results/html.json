{
  "hash": "898caac1ec6879f89787c35b631a634e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Parameterised Rmarkdown\ndate: 2024-07-15\nexecute: \n  echo: true\n  eval: false\n  freeze: auto\noutput: \"markup\"\ncategories: [R, intermediate]\neditor_options: \n  chunk_output_type: console\n---\n\nNo feedback found for this session\n\n\n## Welcome\n\n-   this is an ðŸŒ¶ðŸŒ¶ intermediate-level practical session designed for those with prior R experience, but who are new to Shiny\n-   it's definitely meant to be a taster session, rather than a comprehensive introduction\n-   you' need R of some sort to follow along\n    -   you'll also need Quarto for the Quarto-specific part\n\n## Session outline\n\n- ways of knitting\n- interesting things to try\n    - show/hide code\n    - choose params interactively\n    - knit from a function\n    - use purrr (and possibly targets) to do this at scale\n    - try this with Quarto\n\n## Resources\n\n-   you'll need R 4.0+ and Rstudio/posit.cloud/Posit workbench/VSCode and packages\n-   you'll also need Quarto installed, which can be a battle in the server-based flavours of Posit\n\n## Ways of knitting\n\nWe'll need to start with a hello-world Rmarkdown document. That should be knit-able from the knit button ![knit button](images/clipboard-1650697445.png). But you should also be able to knit using `rmarkdown::render()` to produce some output. Together, those three elements look like this:\n\n::: panel-tabset\n### Rmarkdown\n\n\n\n````{.md}\n---\ntitle: \"Plain Rmarkdown\"\noutput: html_document\n---\n\n```{r, results='asis'}\ncat(\"Hello world\")\n```\n````\n\n\n### Render code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"01_rmd.Rmd\")\n```\n:::\n\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/01_rmd.png)\n:::\n\nThis gets more interesting when you start specifying options inside `render`. A basic example of this would be to change the output filename by adding `output_file`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"Rmarkdown.Rmd\", \n                  output_file = \"Rmarkdown_plain.html\")\n```\n:::\n\n\nWe could also change our output format. By default, rmarkdown docs get rendered to whatever is specified in the header. That's HTML in our case, but we could fiddle that to give us .pdf output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"Rmarkdown.Rmd\", \n                  output_file = \"Rmarkdown_plain.pdf\",\n                  output_format = pdf_document)\n```\n:::\n\n\nNote that we're still producing the same output each time, albeit with different filenames and in different formats. The next part is to add **params**, which will enable us to change the content. We need to make two changes to our Rmd first:\n\n::: panel-tabset\n### Rmarkdown\n\nWe add params in the header, and some code (`params$name`) to access their values in the body of our Rmarkdown document:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n---\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"02_rmd.Rmd\")\n```\n:::\n\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/02_rmd.png)\n:::\n\nWe can now add some params in our render code to produce a different output. Note that, as we set defaults in the Rmarkdown header, these params are optional. But if we do include params in our render call, they will over-ride the defaults:\n\n::: panel-tabset\n### Rmarkdown\n\nSame Rmarkdown:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n---\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"02_rmd.Rmd\",\n                  params = list(name = \"Steve\")) # new param\n```\n:::\n\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/02_rmd_steve.png)\n:::\n\n## Interesting things to do with params: show/hide code\n\n::: panel-tabset\n### Rmarkdown\n\nAdd an extra param to the Rmarkdown, and link it to the chunk options:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n  showcode: TRUE\n---\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = params$showcode) # setting all chunk options to the value of showcode\n```\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"03_rmd.Rmd\",\n                  params = list(showcode = FALSE)) # new param\n```\n:::\n\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/03_rmd_nocode.png)\n:::\n\n## Interesting things to do with params: choose params interactively\n\n::: panel-tabset\n### Rmarkdown\n\nWith the same Rmd, we can run params interactively via a mini-Shiny app:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n  showcode: TRUE\n---\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = params$showcode) # setting all chunk options to the value of showcode\n```\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\nYou can also access this via the knit menu: ![](images/clipboard-386029477.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(\"03_rmd.Rmd\", params = \"ask\") # interactive parameter choice\n```\n:::\n\n\nInteractive parameter chooser: </br>![](images/clipboard-1496409770.png){height=\"200\"}\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/03_rmd_interactive.png)\n:::\n\n\n## Interesting things to do with params: knit from a function\n\n::: panel-tabset\n### Rmarkdown\n\nWe'll use the same Rmd for this:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n  showcode: TRUE\n---\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = params$showcode) # setting all chunk options to the value of showcode\n```\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\nWe build a function to call `rmarkdown::render()` with the right options:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_mark <- function(input_name, show_code = TRUE, format = \"html\"){\n\n  rmarkdown::render(\"03_rmd.Rmd\",\n                    output_file = paste0(\"03_rmd_\", input_name, \".\", format),\n                    params = list(name = input_name, \n                                  showcode = show_code))\n}\n\nmake_mark(input_name = \"Nat\")\nmake_mark(input_name = \"Mel\", format = \"pdf\")\nmake_mark(input_name = \"Sue\", show_code = FALSE, format = \"html\")\n```\n:::\n\n\n### Output\n\n\n::: {.cell}\n\n:::\n\n\n![](images/03_rmd_Nat_pdf.png)\n\nand\n\n![](images/03_rmd_Mel_pdf.png)\n\nand\n\n![](images/03_rmd_Sue_html.png)\n\n:::\n\n## Interesting things to do with params: purrr from that function\n\n::: panel-tabset\n### Rmarkdown\n\nSame Rmd again:\n\n\n\n````{.md}\n---\ntitle: \"Rmarkdown with params\"\noutput: html_document\nparams:\n  name: \"Bruce\" # added a param with a default value\n  showcode: TRUE\n---\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = params$showcode) # setting all chunk options to the value of showcode\n```\n\n```{r, results='asis'}\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\nWe'll now call our `make_mark` function using purrr. `dplyr::expand_grid()` helps set all the correct combinations up for us:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_name = c(\"Angela\", \"Gloria\", \"Audre\", \"bell\")\nformat = c(\"pdf\", \"html\")\n\ntidyr::expand_grid(input_name, format) |>\n  purrr::pwalk(make_mark2) \n```\n:::\n\n\n### Output\n\n\n![Angela HTML](images/03_rmd_Angela.png)\n\nand\n\n![Angela .pdf](images/03_rmd_Angela_pdf.png)\n\nand\n\n![Audr](images/03_rmd_Audre.png)\n\nand\n\n![](images/03_rmd_Audre_pdf.png)\n\n\n...and so on and so on.\n:::\n\nUsing functional programming can lead to massive and complicated results quickly. You should probably investigate the [targets package](https://docs.ropensci.org/targets/) if you're looking to apply this at scale.\n\n## Interesting things to do with params: use in Quarto\n\nThis parameterised approach is also applicable to Quarto.\n\n\n\n::: panel-tabset\n### Quarto\n\nBasically the same as our Rmd with a different render function:\n\n\n\n````{.qmd}\n---\ntitle: \"Quarto with params\"\noutput: html\nparams:\n  name: \"Bruce\" # added a param with a default value\n---\n\n```{r}\n#| results: asis\ncat(paste(\"Hello\", params$name)) # use that param in the body of the document\n```\n````\n\n\n### Render code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\"01_qmd.qmd\") # different render function\n\n\nquarto::quarto_render(\"01_qmd.qmd\", \n                      execute_params = list(name = \"Emma\")) # same way of setting params\n```\n:::\n\n\n### Output\n\n![](images/01_qmd_plain.png)\n\nand\n\n![](images/01_qmd_emma.png)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}