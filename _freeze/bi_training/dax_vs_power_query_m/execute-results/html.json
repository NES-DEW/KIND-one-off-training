{
  "hash": "bd0254e90c90fcd7e6fe46b6558d2bba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DAX vs PowerQuery M\"\ndate: \"2024-07-31\"\nexecute: \n  echo: false\n  freeze: auto\ncategories: [Power BI, beginner]\n---\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Session materials\n\n-   [all materials {{< iconify ph:file-zip size=2x >}}](src/dax_vs_pqm.zip)\n-   slides [{{< iconify ph:file-html size=2x >}} html](src/dax_vs_pqm.html) / [{{< iconify ph:file-pdf size=2x >}} pdf](src/dax_vs_pqm.pdf)\n+ sample files [{{< iconify simple-icons:powerbi size=2x >}} .pbix](data/ae_weeks_start.pbix) / [{{< iconify ph:file-xls size=2x >}}.xlsx](data/dax-pqm.xlsx)\n:::\n\n\n::: {.cell layout-align=\"left\"}\n  \n## Previous attendees have said...  \n  \n- 9 previous attendees have left feedback\n- 100% would recommend this session to a colleague\n- 100% said that this session was pitched correctly  \n\n  \n![](dax_vs_power_query_m_files/figure-html/unnamed-chunk-1-1.png){fig-align='left' width=288}  \n  \n:::{.callout-note}  \n### Three random comments from previous attendees  \n- good session, managed to keep up and good write-up which is very helpful\n- A good description, easy to understand and follow.\n- Still building my knowledge of power bi so this was both a useful refresher of material covered the the beginners pbi course along with new learning\n  \n:::  \n:::\n\n\n## Welcome\n\n-   üå∂ this session is for Power BI beginners\n-   you'll need Power BI Desktop and [this sample dashboard](https://github.com/NES-DEW/KIND-training/raw/main/bi_training/data/ae_weeks_start.pbix) to follow along\n\n\n## Session outline\n\n-   about DAX and PQM\n    -   DAX and PQM vs Excel formulas\n-   distinctive features\n    -   query steps (PQM)\n    -   filter context (DAX)\n-   applications and best practice\n-   feedback and resources\n\n## Setup\n\n-   Power BI desktop\n-   download and open [this sample dashboard](https://github.com/NES-DEW/KIND-training/raw/main/bi_training/data/ae_weeks_start.pbix)\n    -   three datasets, brought in from the web with PowerQuery\n    -   several calculated columns\n\n## About DAX and PQM\n\n-   found in Excel and Power BI (and in Microsoft's SQL products)\n-   DAX (Data Analysis Expressions)\n    -   Excel: PowerPivot\n    -   Power BI: Measures and calculated columns\n-   PQM (Power Query M)\n    -   Excel: PowerQuery and various `Get Data` tools\n    -   PowerBI: various data loading tools and `Tranform data`\n\n## Different applications\n\n-   DAX = summarising/analysing data\n-   PQM = loading/transforming data\n\n## DAX vs Excel\n\n-   there are plenty of apparent similarities with Excel\n    -   broadly, functional approach\n    -   similar/identical function names\n    -   similar syntax in some places\n-   calculate a column `overall = SUM(ae_activity[over4])` in DAX\n    -   like Excel, this sums the entire `over4` column, rather than each row </br> ![sums the entire over4 column](images/clipboard-528769158.png)\n\n## PQM vs Excel\n\n-   PQ really looks like Excel\n    -   familiar tools - renaming/removing columns, filtering\n    -   evolved tools - like `Split Column`\n-   PQM is much less like Excel formula language than DAX\n\n## Appearances mislead\n\n-   try adding another column to the Excel formula, and to the DAX\n    -   e.g. `overall = SUM(ae_activity[over4], ae_activity[over12]))`\n    -   ‚úîÔ∏è Excel is perfectly fine with this\n    -   ‚ùå but DAX's `SUM` function falls over\n-   for PQM, totally different approach required to Excel\n\n## Input in DAX\n\n-   DAX takes structured references to columns and tables (no `A3`)\n    -   `overall = SUM(ae_activity[over4])` sums all the values in the over4 column\n    -   `table[column]` - so this is the `over4` column in the `ae_activity` table\n\n## Input in PQM\n\n-   PQM works on **query steps**, with the **#step name** (and columns/tables) as input\n    -   `= List.Sum(#\"Filtered Rows\"[over4])` would sum all the values in the over4 column </br> ![sum all the values in the over4 column](images/clipboard-1782980858.png)\n    -   takes the `#Filtered Rows`query step, and sums its `over4` column\n    -   that new query step will be called `#Calculated Sum` (but we could edit that)\n-   this is unusual, but gives PQM users a tweak-able history of their data transformation with undo/redo\n-   try looking at the advanced editor in PQM to see what PQM really looks like </br> ![advanced editor view of PQM](images/clipboard-989890971.png)\n\n## Filter context\n\n-   there is considerable overlap between DAX and PQM\n    -   example: DAX's calculated columns replicates functionality in PQM (and Excel)\n-   to show the DAX-specific part of the story, we'll need to make a measure\n-   measures are responsive summaries of our data - when a user twiddles the dashboard, they'll change\n    -   or, *measures respond to the filter context*\n\n## Make a measure\n\n-   take your calculated column DAX and make a measure using exactly the same code\n    -   `overall_m = SUM(ae_activity[over4])`\n        -   same code as the calculated column\n        -   different filter context\n-   then put `overall` and `overall_m` into a table, and play with the filters: </br> ![different results for the calculated column and the measure](images/clipboard-417490134.png)\n\n## More on the filter context\n\n-   different functions interpret the context differently: `SUM` vs `SUMX`\n    -   `SUMX` evaluates some expression for each row in the context: `overall_x = SUMX(ae_activity, ae_activity[over4] + ae_activity[over8])` </br> ![`SUMX` evaluates some expression for each row in the context](images/clipboard-193493353.png)\n-   `CALCULATE` as a function specifically for fooling with the filter context in a more detailed way\n    -   `overall_borders = CALCULATE(SUM(ae_activity[over4]), ae_activity[board] = \"NHS Borders\")` to restrict to just NHS Borders </br> ![restrict to just NHS Borders](images/clipboard-1383498018.png)\n\n## Applications and best practice\n\n-   there's lots of overlap, and so you can work to suit your preferences\n    -   e.g. not clear whether creating calculated columns is better in DAX or PQM\n-   DAX is great when:\n    - you need your data to respond to the user\n    - you need to create lots of calculated values\n-   PQM is great when:\n    - you need to transform/clean your data\n    - you need to repeatedly load some data\n    - you need to undo/redo\n\n## Resources\n\n-   DAX: [Russo and Ferrari 2019 *The Definitive Guide to DAX*](https://www.sqlbi.com/books/the-definitive-guide-to-dax-2nd-edition/)\n\n-   PQM: [Microsoft's function reference](https://learn.microsoft.com/en-us/powerquery-m/power-query-m-function-reference) is useful, but their [intro pages](https://learn.microsoft.com/en-us/powerquery-m/m-spec-introduction) are confusing and hard to recommend\n\n",
    "supporting": [
      "dax_vs_power_query_m_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}