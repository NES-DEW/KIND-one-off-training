{
  "hash": "99d9af1858cdbc8225129ef664fbf256",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lookups in Excel\"\ndate: \"2024-08-01\"\nexecute: \n  echo: true\n  freeze: true\ncategories: [excel, intermediate]\n---\n\n\n\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Session materials\n\n-   [all materials {{< iconify ph:file-zip size=2x >}}](src/lookups_in_excel.zip)\n-   slides [{{< iconify ph:file-html size=2x >}} html](src/lookups_in_excel.html) / [{{< iconify ph:file-pdf size=2x >}} pdf](src/lookups_in_excel.pdf)\n+ sample file [{{< iconify ph:file-xls size=2x >}}.xlsx](src/lookups_in_excel.xlsx) / completed sample file [{{< iconify ph:file-xls size=2x >}}.xlsx](src/lookups_in_excel_final.xlsx)\n:::\n\n\n\n\n::: {.cell layout-align=\"left\"}\n  \n## Previous attendees have said...  \n  \n- 16 previous attendees have left feedback\n- 100% would recommend this session to a colleague\n- 100% said that this session was pitched correctly  \n\n  \n![](lookups_in_excel_files/figure-html/unnamed-chunk-1-1.png){fig-align='left' width=288}  \n  \n:::{.callout-note}  \n### Three random comments from previous attendees  \n- Encouraging and no question is a stupid question, thank you\n- Insightful\n- Really useful and I definitely learned a few new things.\n  \n:::  \n:::\n\n\n\n\n## Welcome\n\n-   ðŸŒ¶ðŸŒ¶ this session is designed for intermediate Excel users\n+ you'll need Excel M365 Desktop and [this sample Excel workbook](src/lookups_in_excel.xlsx) to follow along, and you'll need to be comfortable working with tables, references, and formulas to get the most out of the session\n-   this session is part of our [Excel Skills course](https://learn.nes.nhs.scot/71690), which is a five-session live-on-Teams training programme designed to build your Excel skills to help you work more effectively in Excel\n\n## Session outline\n\n+ introduction to lookups\n+ three methods for lookups\n    + `INDEX()` + `MATCH()`\n    + `VLOOKUP()`\n    + `XLOOKUP()`\n+ partial matching\n\n## Introducing lookups\n\nWhat does a lookup do? Imagine that you have a table like this:</br>![](images/im_names.png)\n\nA lookup would let us find someone's age from their name by:\n\n1. taking that name from somewhere\n2. finding out what row of the table that name is found in\n3. and then returning the age from that row\n\n## `INDEX()` and `MATCH()`\n\n+ `MATCH()` takes a value, and finds what row it occurs in\n+ `INDEX()` takes a row, and returns a value from it\n+ older way of doing lookups\n    + think *timeless classic* rather than *old banger*\n+ simple and flexible\n+ great way to understand and practice the logic of lookups\n\n### `INDEX()`\n\n+ `INDEX()` retrieves data from cells. You supply two arguments:\n    + an array (range) of cells\n    + a row number\n+ `INDEX(A1:A10, 3)` gives you the third row of the range A1:A10\n+ general syntax: `INDEX(array, row_num, [column_num])`\n    + `array` is the range we want to look in\n    + `row_num` and the optional `column_num` is the number of the row (Â± column) that you want\n\n::: {.callout-tip title=\"Task\"}\n1. Find the `INDEX` worksheet of the [sample workbook](src/lookups_in_excel.xlsx)\n1. We have a one-column table containing names in `A2:A11`\n1. Use `INDEX()` to find the value in the third row\n\n:::\n\n![](images/03_index3.png){height=\"250\"}\n\n\n### `MATCH()`\n+ `MATCH()` retrieves the row number of a cell. You supply two arguments:\n    + a lookup value\n    + an array of cells\n+ `MATCH(lookup_value, lookup_array, [match_type])`\n\n\n\n::: {.callout-warning}\n+ the optional `match_type` argument is deathly important:\n+ **1 (or omitted)** finds the largest value that is less than or equal to the lookup\n+ **0**  finds the first value that is exactly equal to the lookup\n+ **-1** finds the smallest value that is greater than or equal to the lookup\n:::\n\n### `MATCH()`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `MATCH` worksheet\n1. We have (the same) one-column table of names in `A2:A11`\n1. Use `MATCH()` to find the row containing \"Broward\" - being careful to set **match_type** appropriately\n\n:::\n\n\n\n![](images/03_match.png){height=\"250\"}\n\n\n### `INDEX()` + `MATCH()`\n\n+ given that match gives us the row number, and index takes a row number and returns a value, we can link them up nicely </br>![](images/03_indemat.png)\n+ first search through our data to find a `MATCH()`ing row\n+ then use `INDEX()` to retrieve some other column from that row\n\n\n\n\n\n\n\n\n\n+ the general syntax will be `=INDEX(range, MATCH(\"Name\", range, 0))`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `INDEX + MATCH (1)` worksheet\n1. We have a two column table, and we want a user to be able to supply a number in `E2`, and receive the appropriate word in `E3`\n1. First, write an appropriate `MATCH()` formula to find the row matching the input\n1. Next, write an `INDEX()` to take that `MATCH()` value and return the appropriate word\n1. Finally, try joining both formulas together in one to give an `INDEX()` + `MATCH()`\n:::\n\n![](images/03_indma.png){height=\"200\"}\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `INDEX + MATCH (2)` worksheet. We have several formulas about Eunika. Can you fix them to give the correct result?\n:::\n\n\n## `VLOOKUP()`\n+ while `INDEX()` and `MATCH()` is great, it does produce some nasty-looking formulas\n+ `VLOOKUP()` was introduces as a neater alternative - roughly `INDEX()` + `MATCH()` in one \n+ `VLOOKUP` returns along rows, allowing us to look up a value in one column, and returns a corresponding value from another column\n+ that sounds ideal, but beware: `VLOOKUP()` is **much** more quirky and unreliable than `INDEX()` + `MATCH()`\n+ here's the syntax for `VLOOKUP()`:\n  + `VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])`\n      + `lookup_value` is what we want to look up\n      + `table_array` is the table that we're looking up in\n      + `col_index_num` is the number of the column that we want to return from\n      + `range_lookup` allows either approximate matching (the default) or exact matching (by specifying FALSE)\n          + The major source of oddity. Make sure you [check the manual](https://support.microsoft.com/en-us/office/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1) before doing anything serious with `VLOOKUP()`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `VLOOKUP` worksheet\n1. There are two requests for lookups. Can you populate them with appropriate `VLOOKUP()` formulas?\n:::\n\n::: {.callout-warning}\n+ `VLOOKUP()` generally requires the lookup value to [appear in the left-most column of your range](https://support.microsoft.com/en-gb/office/how-to-correct-a-n-a-error-in-the-vlookup-function-e037d763-ffc3-4fae-a909-89c482d389b2)\n+ as the second part of the task shows, this requirement can manifest in lots of odd ways\n:::\n\n## `XLOOKUP()`\n+ semi-new (any versions after Excel 2019)\n+ similar to `INDEX()` + `MATCH()`. Major differences:\n    + it **spills**, so ideal for returning unpredictable quantities of cells\n    + provides exact matching by default\n+ the basic syntax is: `= XLOOKUP(lookup_value, lookup_array, return_array)`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `XLOOKUP (1)` worksheet\n1. There are two requests for lookups. Can you populate them with appropriate XLOOKUP() formulas?\n\n:::\n\n### Returning several cells with `XLOOKUP()`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `XLOOKUP (2)` worksheet\n1. Set up an `XLOOKUP()` supplying a range of columns as the `return_array` value\n:::\n\n### Fighting with tables\n\n+ note that returning several cells into a table often causes errors\n+ you may need to work with a range instead if planning to use `XLOOKUP()` to return an unpredictable amount of data\n\n  \n## Partial text matching\n \n+ Excel is not brilliant for partial text matching\n+ there are a number of commercial add-ins and VBA-based solutions\n    + those come with risks\n    + we'll concentrate on base-Excel here\n+ three main options:\n\n\n1. `XLOOKUP()` with `match_mode = 2` + wildcard\n1. `VLOOKUP()` with `range_lookup = FALSE` + wildcards\n1. `MATCH()` with `match_type = 0` + wildcards\n\n### `XLOOKUP()` with `match_mode = 2` + wildcard\n+ `XLOOKUP()` allows partial matching via the \"`*`\" wildcard\n+ add \"`*`\" to the end of the partial string you want to match\n+ however, please be aware that:\n\n1. this will only reliably match sub-strings at the start of strings\n    1. (so \"`ow*`\" will match \"`owl`\" but not \"`towel`\")\n    1. adding extra wildcards interacted unpredictably with `match_mode` in testing\n    \n+ `=XLOOKUP(\"*substring*\", search col, return col, ,2)`\n\n### `VLOOKUP()` with `range_lookup = FALSE` + wildcards\n+ as with `XLOOKUP`, adding \"`*`\" allows wildcard matching\n+ but you can do better with the **wildcard sandwich**: `\"*substring*\"`\n    + or, if you're bringing in a reference `\"*\" & cell_ref & \"*\"`\n+ ensure you set the (confusingly named) `range_lookup` argument to `FALSE` to allow approximate matching\n+ `VLOOKUP(\"*substring*\", table, column, FALSE)`\n\n\n### `MATCH()` with `match_type = 0` + wildcards\n+ same wildcard sandwich strategy, with the flexibility of `INDEX()` + `MATCH()`\n+ my preferred solution, largely because the other options are harder to debug\n+ `=INDEX(array, MATCH(\"*substring*\", array, 0))`\n\n::: {.callout-tip title=\"Task\"}\n1. Go to the `Partial matching` worksheet\n1. Try implementing these three ways of partial matching\n:::",
    "supporting": [
      "lookups_in_excel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}