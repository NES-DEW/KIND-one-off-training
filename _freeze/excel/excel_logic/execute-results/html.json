{
  "hash": "3e065e9c6a19b13abb15174ce175462e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Logic in Excel\"\nexecute: \n  echo: false\n  freeze: auto\ncategories: [excel, advanced]\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Session materials\n\n-   [all materials {{< iconify ph:file-zip size=2x >}}](src/logic_in_excel.zip)\n-   slides [{{< iconify ph:file-html size=2x >}} html](src/logic_in_excel.html) / [{{< iconify ph:file-pdf size=2x >}} pdf](src/logic_in_excel.pdf)\n+ exercises [{{< iconify ph:file-xls size=2x >}}.xlsx](src/logic_in_excel.xlsx) / completed exercises [{{< iconify ph:file-xls size=2x >}}.xlsx](src/logic_in_excel_final.xlsx)\n:::\n\n\n\n\n::: {.cell layout-align=\"left\"}\nNo feedback found for this session\n:::\n\n\n\n\n\n\n\n## Welcome\n\n-   this session is for ðŸŒ¶ðŸŒ¶ðŸŒ¶ advanced Excel users, who are confident writing formulas\n\n## Acknowledgements\n\nSincere thanks and appreciation to people who volunteered formulas for this session: \n\n+ Laura De Jongh (Hanover Scotland)\n+ Gail Young (NHS Greater Glasgow & Clyde)\n+ Gail Donaldson (NHS Lanarkshire)\n+ Matthew Hooks (Scottish Ambulance Service)\n+ Susanna Kirk (NHS Fife)\n+ Hilary Guthrie (NHS Lothian)\n+ Irene Ventura (NHS Lanarkshire)\n+ Peter Wild (NHS Ayrshire & Arran)\n+ Chris Spratt (NHS National Services Scotland)\n\n## Session outline\n\n-   intro to logic in Excel\n    -   five minutes of Boolean algebra\n    -   basic logical functions (`NOT`, `AND`, `OR`)\n    -   putting logical functions to work with `IF` and `IFS`\n-   using logic in Excel\n    -   dealing with errors and missing values (`IFERROR`, `IFNA`, and friends)\n    -   managing different data types (`ISNUMBER` and friends)\n    -   conditional summarising (`SUMIF`, `COUNTIFS`, and friends)\n    -   nesting `IF` statements and future-proofing your work\n\n## Boolean algebra\n\n-   the standard way of working with truth-values\n    -   found all over mathematics, logic, computer science...\n-   think of a statement like `\"my cat is blue\"`\n    -   call that `P` to save writing it every time\n- assume that `P` is either completely `TRUE` or completely `FALSE`\n\n## NOT\n\n-   `NOT` gives us the opposite truth-value\n-   if `P` is `FALSE`, then `NOT P` is `TRUE`\n-   a useful shorthand: the **truth table**:\n\n\n\n| P     | NOT P |\n|-------|-------|\n| TRUE  | FALSE |\n| FALSE | TRUE  |\n\n## AND\n\n-   we also have functions to understand what happens when we're dealing with two statements\n-   `AND` is a great example - it's `TRUE` when both the statements are `TRUE`\n\n\n\n::::: columns\n::: {.column width=\"40%\"}\n| P     | Q     | P AND Q |\n|-------|-------|---------|\n| TRUE  | TRUE  | TRUE    |\n| TRUE  | FALSE | FALSE   |\n| FALSE | TRUE  | FALSE   |\n| FALSE | FALSE | FALSE   |\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"50%\"}\n\n\n\n![](excel_logic_files/figure-html/unnamed-chunk-3-1.png){width=672}\n\n\n\n:::\n:::::\n\n## OR\n\n-   `OR` is `TRUE` when either of the statements are `TRUE`\n\n::::: columns\n::: {.column width=\"40%\"}\n| P     | Q     | P OR Q |\n|-------|-------|--------|\n| TRUE  | TRUE  | TRUE   |\n| TRUE  | FALSE | TRUE   |\n| FALSE | TRUE  | TRUE   |\n| FALSE | FALSE | FALSE  |\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"50%\"}\n\n\n\n![](excel_logic_files/figure-html/unnamed-chunk-4-1.png){width=672}\n\n\n\n:::\n:::::\n\n## XOR\n\n-   For completeness, we should also talk about `XOR`\n- `XOR` is `TRUE` when either of the statements - but not both - are `TRUE`\n\n::::: columns\n::: {.column width=\"40%\"}\n| P     | Q     | P XOR Q |\n|-------|-------|--------|\n| TRUE  | TRUE  | FALSE   |\n| TRUE  | FALSE | TRUE   |\n| FALSE | TRUE  | TRUE   |\n| FALSE | FALSE | FALSE  |\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"50%\"}\n\n\n\n![](excel_logic_files/figure-html/unnamed-chunk-5-1.png){width=672}\n\n\n\n:::\n:::::\n\n## `NOT` in Excel\n\n-   sweet relief: please [open the sample workbook for this session](src/logic_in_excel.xlsx) in Excel\n-   have a look at the `NOT` worksheet\n    -   `NOT()` function inputs in the truth-table\n    -   example use about inhalers\n        -   note that `NOT()` will treat **any** number as `TRUE`, and 0 as `FALSE`\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Task\n\n-   please add a formula to decide whether a person is a **non-user** of inhalers or not\n-   it should return `TRUE`/`FALSE` based on the number of inhalers used\n:::\n\n## `AND` and `OR` in Excel\n\n-   have a look at the `AND / OR` worksheet\n    -   have a look at the truth-table for `AND` and `OR`\n    -   specifically, look at the formulas and the way they use `AND()` and `OR()`\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Task\n\n-   in the hypertension/diabetes table, you've got several rows of data where each represents a person. Please write two formulas:\n    -   for diet and lifestyle, you'll want to return `TRUE` if a person has either hypertension and/or diabetes\n    -   for statins, you'll want to return `TRUE` is a person has both hypertension and diabetes\n:::\n\n## IF\n\n-   unfortunately our data usually doesn't come neatly coded into `TRUE` and `FALSE`\n-   that mean we'll usually need to use our basic logical functions in combination with other functions\n-   `IF` is a great example of a function that helps you convert to logical values\n-   here's an example formula: `=IF(B3 > 150, \"Hypertension\", \"No hypertension\")`\n    -   if the value in B3 is over 150, the formula returns `\"Hypertension\"`\n    -   otherwise it returns `\"No hypertension\"`\n\n-   this is useful in its own right, but gets even more powerful when you return logical values\n- have a look at the top table on the `IF` worksheet\n\n::: {.callout-note collapse=\"false\" appearance=\"default\" icon=\"true\"}\n## Task\n\n-   in the `IF` worksheet, there's an incomplete table of blood pressure values\n-   please write a formula to return `TRUE` if those values are over 150, and `FALSE` otherwise\n-   there's a named cell on this sheet called `Cutoff` - please now change that 150 in your `IF` formula to use the value of the named cell\n:::\n\n## TRUE and FALSE are 1 and 0\n+ many other tools let you add up `TRUE`/`FALSE` values as if they were 1s and 0s\n+ this can be very useful - say, to quickly count matching values\n+ Excel needs a minor workaround: add `--` before a logical value to treat it as a number: `=SUM(--Table1[Hypertension?])`\n\n## IFS\n\n-   `IFS` allows you to check for the presence of several conditions fairly concisely\n-   an example: `=IFS(B4 = TRUE,\"High\",C4 = \"CRD\",\"High\", D4 > 20,\"High\", TRUE,\"Low\")`\n    -   read this horror as pairs of arguments, like `B4 = TRUE`, `\"High\"`\n    - each pair contains\n        -   a logical test - like `B4 = TRUE`\n        -   a return value if that test is `TRUE` - like `\"High\"`\n    -   the final pair of arguments are a catch-all to pick up all non-matched values\n    \n## Public service announcement\n\n- just because you can, doesn't mean you should\n- `IFS` get pathologically complicated\n- pivot tables might be better for more complicated cases\n\n## `IFNA`, `IFERROR`, and friends\n\n-   these functions are great for dealing with errors and missing values\n-   that's useful, because (understatement of the decade) Excel isn't very good at consistently dealing with errors and missing values\n\n## `IS` and `IF` functions\n\n-   `IS****` functions detect errors and missing values and return `TRUE`/`FALSE`\n-   `IF****` functions detect, and then:\n    -   if an error is found display a message of your choice\n    -   otherwise just repeat the value they refer to\n\n## What do they detect?\n\n![](images/clipboard-518981517.png)\n\n## The important error messages ones\n\n- BLANK = \"There's no value in that cell\"\n- ERROR = \"This formula doesn't work properly\"\n- #N/A = \"[I can't find what I was asked to find](https://support.microsoft.com/en-gb/office/how-to-correct-a-n-a-error-a9708411-f82e-4e1b-8a7e-28c28311b993)\"\n- ERR = \"A non-N/A error has happened\"\n\n## SUMIF and COUNTIF\n\n+ basically, `IF` plus summary functions\n+ three simple-ish examples to see:\n  + `=SUMIF(B3:F3,\">5\")`, which totals all values in the range greater than 5\n  + `=COUNTIF(A10:E10,\"ramipril\")`, which counts all occurrences of the work \"ramipril\" in a range\n  + or the close relative `=COUNTIF(A10:E10,\"*prazole\")` which uses a wildcard to count all the words ending in \"prazole\" from a range\n+ there's also the more complex `SUMIFS`, which allows you to sum with multiple conditions\n\n## Example applications\n+ `=IF(AND(B4 >= TIMEVALUE(\"08:30\"), B4 <= TIMEVALUE(\"17:00\")), \"In hours\", \"Out of hours\")` to determine if a time is in- or out-of-hours\n+ `=IF(LEN(B20)=9,CONCATENATE(\"0\",B20),TEXT(B20,\"0\"))` to re-add a dropped leading 0 from a CHI / ISBN\n+ `=IF(ISBLANK(B26), \"\", B26)` to elegantly reference date values to avoid returning `00/01/1900` for missing values\n+ `=IF((TODAY() > DATE(YEAR(B31) + 3, MONTH(B31), DAY(B31))), \"Late\", \"Not late\")` to determine if an activity has taken place in the past three years\n+ `=FILTER(B35:B41, (C35:C41 > 4)*D35:D41>4)` to find all rows with a value more than 4 in both the C and D column\n+ `=IF(COUNTIF(B44,\"*ow*\"),TRUE,FALSE)`. `IF` by itself doesn't allow wildcard matching, so you can attempt a work-around via `COUNTIF`\n",
    "supporting": [
      "excel_logic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}