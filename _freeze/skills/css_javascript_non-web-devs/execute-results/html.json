{
  "hash": "51a0b8417495125bc7fd55b21a4d8114",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: CSS and Javascript for non-web developers\ndate: 2023-10-26\nexecute: \n  echo: true\n  eval: true\n  freeze: auto\n  output: \"markup\"\ncategories: [skills, beginner, CSS, Javascript]\neditor_options: \n  chunk_output_type: console\nbibliography: references.bib\n---\n\n\n\n## Overview\n\n+ CSS and Javascript are central topics for web developers\n+ As web tech dominates analytic tech, they're increasingly of interest to analysts and other knowledge workers\n    + e.g. basically everything is built on browsers (esp. Chromium)\n+ specific examples here are mainly R-ish\n    + theme-ing Shiny, Rmarkdown, and similar\n    + building custom Power BI visuals\n+ the take-aways are generic\n    + it's useful to separate **content** and **style** and **scripting**\n\n## Usual words of warning\n\n+ No claims about expertise here \n    + this is a beginner's session by a beginner </br>![](images/11hrs.png)\n    + definitely no stupid questions in this context\n+ it's also an overview, rather than anything more in-depth\n  + I wouldn't expect to be that confident around CSS after just this session\n  + ... but it's a start\n\n## A view from web 1.0\n[Join me in the year 1998](https://oldweb.today/?browser=ns4-mac#19991001/http://nasa.gov)\n\n## Web 1.0 to whatever we've got now\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n![](images/nasa_1998.png)\n<a href=\"view-source:https://web.archive.org/web/19981202170636/http://www.nasa.gov/\">source</a>\n:::\n\n::: {.column width=\"10%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"45%\"}\n![](images/nasa_2023.png)\n\n<a href=\"view-source:https://www.nasa.gov/\">source</a>\n:::\n\n::::\n\n## A view from web 1.0\n\n+ written in HTML\n+ mixture of content and style and scripting\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<font face=\"Helvetica, Arial\" size=\"2\">\n  <font color=\"#000000\">\n  \"NASA is deeply committed to spreading the unique knowledge that flows from its aeronautics and space research....\"\n  </font>\n</font>\n```\n:::\n\n\n\n\n## The stars look very different, etc, etc\n\n+ the 2023 version is still written in HTML\n+ much longer (10x)\n+ but no style information\n+ and plenty of [linked javascript](https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js)\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<div class=\"margin-bottom-2\">\n  <h3 class=\"heading-16 line-height-md\">NASA Kennedy Ready for Artemis II Moon Mission Ground Systems Testing</h3>\n</div>\n  \n```\n:::\n\n\n## Where's the style coming from\n\n+ [this atrocity](https://www.nasa.gov/_static/??-eJyFjEEOwjAMBD+EccshKgfUt7ipWyIcp6qTRvyeiF64cVrtzmqwbuCTZtaMXkILiAU2KWtQw2J1Nlh2ilzT/jo7TiXIjJbfwnb1Zhf8keQnRzZUMsLGcJU0kYDS8ffKR1u/xjE+encfbq7rBvcB5IY8Bg==)\n+ linked from the HTML page\n+ gives styling info for all the elements included on the page\n\n## Minifying\n\n+ CSS (and JavaScript) are downloaded by the browser\n+ the larger the code, the slower the site\n+ this [is a huge problem](https://httparchive.org/reports/state-of-the-web)\n+ [minifying](https://en.wikipedia.org/wiki/Minification_(programming)) is common - reducing the size of the code improves performance\n\n## Unminifying\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.bg-carbon-black {\n  background-color: #000;\n}\n\n.bg-spacesuit-white {\n  background-color: #fff;\n}\n\n.bg-nasa-red {\n  background-color: #f64137;\n}\n```\n\n\n<style type=\"text/css\">\n.bg-carbon-black {\n  background-color: #000;\n}\n\n.bg-spacesuit-white {\n  background-color: #fff;\n}\n\n.bg-nasa-red {\n  background-color: #f64137;\n}\n</style>\n:::\n\n\n+ **selector** (what [does this style apply to?](https://www.w3schools.com/css/css_selectors.asp))\n+ **declaration** (which [properties and which values?](https://www.w3schools.com/css/css_colors.asp))\n+ look at [nasa_css_demin.css](src/nasa_css_demin)\n\n## So why so complicated?\n\n+ there are lots of things that can be styled with CSS\n    + that makes things potentially complicated\n    + but it also means that styling can be both precise and *very* radical\n+ from [bare text](https://csszengarden.com/99/) to something [really nice](https://csszengarden.com/)\n+ growing ambitions from [c.2000-ish](https://csszengarden.com/100/) / [and a bit later](https://csszengarden.com/115/)\n+ [mad impressive CSS](https://csszengarden.com/219/)\n\n## Let's have a play with something simpler\n\n+ [W3 Schools](https://www.w3schools.com/css/tryit.asp?filename=trycss_default)\n\n## Elements?\n+ `<h3 class=\"heading-16 line-height-md\">`\n    + **name** = `h3`\n    + **class** = `heading-16 line-height-md`\n\n\n## Style?\n\n\n::: {.cell}\n\n```{.css .cell-code}\nh3 {\n  color: hotpink;\n  text-align: right;\n}\n\n.key-word{\n\tcolor: red;\n    text-shadow: 2px 2px #558abb;\n    }\n    \n.glossary{\n\tbackground-color: white;\n\tcolor: blue;\n    font-size: 150%;\n    }\n    \n```\n:::\n\n\n## Lack of style\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.horrid {\n\tanimation: blinker 0.1s linear infinite;\n}\n\n@keyframes blinker {\n  50% {\n    opacity: 0;\n  }\n}\n\n```\n:::\n\n\n\n## Why does this help?\n+ the dream of the [semantic web](https://en.wikipedia.org/wiki/Semantic_Web)\n+ CSS = cascading style sheets\n    + granular control over styling\n+ strategy for managing complexity\n    + break out all the styling information into one place\n    + get it away from the content\n\n\n## An application: inline styling\n\n+ I'll style this text with some css\n+ I'll <span style = \"color: red\"> style this text with some css</span>\n\n\n```{=html}\n#| echo: true\nI'll <span style = \"color: red\"> style this text with some css</span>\n```\n\n\n## An application: linked CSS\n\n+ we could link a CSS file via the yaml header of this page\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\nformat:\n    revealjs:\n        theme: [default, custom.scss]\n```\n:::\n\n\n+ we could style a single element with inline CSS\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.reveal .slide-logo {\n        height: 85px !important;\n        width: 300px!important;\n        max-width: unset !important;\n        max-height: unset !important;\n      }\n```\n:::\n\n\n+ and we can add to that single styling\n\n\n\n::: {.cell}\n\n```{.css .cell-code}\n.reveal h2 {\n  color: red;\n}\n```\n:::\n\n\n## Five minutes of Javascript\n\n+ scripting language\n+ excellent integration with HTML and CSS\n+ really powerful integration with Rmarkdown via `htmltools`\n\n## JS in Shiny\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nui <- fluidPage(\n    tags$button(HTML(\"document.write('Hello World');\")),\n    tags$script(src = \"my_script.js\"),\n    includeScript(path = \"my_script3.js\")\n    \n)\nserver <- function(input, output, session) {\n}\nshinyApp(ui, server)\n```\n:::\n\n\n## Custom BI visualisations\n\n+ [nice walkthrough](https://learn.microsoft.com/en-gb/power-bi/developer/visuals/develop-circle-card#add-visual-elements-and-text)\n\n## Final\n\n+ **content** and **style** and **scripting**",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}