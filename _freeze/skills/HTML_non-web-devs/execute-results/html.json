{
  "hash": "044e5b8d75a4d480c9f46cde876336ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: HTML for non-web developers\ndate: 2024-03-28\nexecute: \n  echo: true\n  eval: true\n  freeze: auto\n  output: \"markup\"\ncategories: [skills, beginner, HTML, JSON, XML]\neditor_options: \n  chunk_output_type: console\nbibliography: references.bib\n---\n\n```{=html}\n<style>\n.container{\n  display: flex;\n}\n.col {\n  flex: 1;\n}\n</style>\n```\n\n## Why do this?\n\n-   HTML is mainly used to write websites\n-   So why bother with HTML if you don't?\n\n[![image: publicdomainvectors.org](images/paste-1FA5FE08.png){fig-alt=\"Swiss Army Knife\" fig-align=\"center\"}](https://publicdomainvectors.org/en/free-clipart/Army-knife/40628.html)\n\n## Why is HTML useful?\n\n-   **Semantic markup**\n-   Say what an element is, rather than how it should look\n\n\n\n![](images/paste-6455FB13.png){fig-align=\"center\" width=\"435\"}\n\n\n\n...and not\n\n![](images/paste-0F330FC6.png){fig-align=\"center\" width=\"386\"}\n\n## Related tools\n\n-   XML\n\n\n\n```         \n<menu id=\"file\" value=\"File\">\n  <popup>\n    <menuitem value=\"New\" onclick=\"CreateNewDoc()\" />\n    <menuitem value=\"Open\" onclick=\"OpenDoc()\" />\n    <menuitem value=\"Close\" onclick=\"CloseDoc()\" />\n  </popup>\n</menu>\n# https://json.org/example.html\n```\n\n-   JSON\n\n\n\n```         \n{\"menu\": {\n  \"id\": \"file\",\n  \"value\": \"File\",\n  \"popup\": {\n    \"menuitem\": [\n      {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},\n      {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},\n      {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}\n    ]\n  }\n}}\n# https://json.org/example.html\n```\n\n## Where might you use HTML?\n\n\n\n::: container\n::: col\n![](images/paste-AA28A197.png){fig-align=\"center\" width=\"300\"}\n:::\n\n::: col\n![](images/paste-E71FE4A5.png){fig-align=\"center\" width=\"300\"}\n:::\n:::\n\n(not surprising)\n\n\n\n::: container\n::: col\n![](images/paste-4D2540F7.png){fig-align=\"center\" width=\"300\"}\n:::\n\n::: col\n![](images/paste-567DEABA.png){fig-align=\"center\" width=\"300\"}\n:::\n:::\n\n(possibly surprising)\n\n## Make some HTML\n\n-   Create a .txt file in notepad\n\n-   save as .html\n\n-   add some text\n\n-   open in your web browser\n\n## What does it look like?\n\n\n\n![](images/paste-403D7E6E.png){fig-align=\"center\" width=\"800\"}\n\n## Add some tags\n\n### `<h1> Heading </h1>`\n\n-   tags = how we add information to the text\n-   surrounded by `<`angle brackets`>`\n-   mixture of single and paired tags\n\n## Starter single tags\n\n-   `<img src=\"URL\">`\n-   `</br> Line break`\n-   `<hr> Horizontal rule`\n\n## Starter paired tags\n\n-   `<h1>Heading</h1>`\n-   `<a href=\"URL\">Link</a>`\n\n## Images (1)\n\n`<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"500\" ALIGN=\"left\" HSPACE=\"15\" VSPACE=\"25\"/>`\n\n<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"500\" align=\"left\" hspace=\"15\" vspace=\"25\"/>\n\n</br>\n(this goes a bit wonky in the quarto we use to build the training pages - definitely worth trying out yourself in your HTML file)\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Images (2)\n\n`<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\" ALIGN=\"right\" HSPACE=\"15\" VSPACE=\"55\"/>`\n\n<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\" align=\"right\" hspace=\"15\" vspace=\"55\"/>\n\n</br>\n(this goes a bit wonky in the quarto we use to build the training pages - definitely worth trying out yourself in your HTML file)\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Tables (1)\n\n| Webinar                    | Date              |\n|----------------------------|-------------------|\n| Nov 2022 (R)               | 2022-11-16, 2-3pm |\n| Dec 2022 (KIND conference) | 2022-12-07, 1-5pm |\n\n## Tables (2)\n\n```         \n<table>\n  <thead>\n    <tr class=\"header\">\n      <th align=\"left\">Webinar</th>\n      <th align=\"left\">Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"left\">Nov 2022 (R)</td>\n      <td align=\"left\">2022-11-16, 2-3pm</td>\n    </tr>\n      <td align=\"left\">Dec 2022 (KIND conference)</td>\n      <td align=\"left\">2022-12-07, 1-5pm</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n## Don't learn (many) tags\n\n-   for web developers, yes, do learn them! (also all the css and java that are used to display and style the information in the html)\n-   takeaway for everyone else - it's being able to pick out the structure that's useful\n-   family of similar languages (XML, JSON) - store information and use it\n\n## Data munging\n\n1.  (the hard bit) make/find an HTML version of your document\n    1.  Take a lot of links in a document\n    2.  Save the Word doc as html and tidy it up\n2.  Open that webpage source using Notepad\n3.  Paste html code into Excel\n4.  Delete the columns you don't need. (try F5, selecting 'Special', then 'Blanks', then Ctrl+-)\n5.  Use Text to Columns tool to remove html bits (split on `\"`)\n\n## parsing HTML\n\n-   [\"You can't parse \\[X\\]HTML with regex\"](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\n\"<p>This is some text. This is <b>bold!</b></p>\" |>\n  read_html() |>\n  xml_text(trim = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is some text. This is bold!\"\n```\n\n\n:::\n:::\n\n\n## parsing HTML\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"skills/data/doc_links.htm\") |>\n  xml2::read_html() |>\n  xml2::xml_find_all(\"//@href\") |>\n  xml2::as_list() |>\n  purrr::flatten() |>\n  unlist() |>\n  sample(5) # just a random sample of five to avoid overload\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://665.example.com\" \"https://810.example.com\"\n[3] \"https://783.example.com\" \"https://279.example.com\"\n[5] \"https://956.example.com\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "HTML_non-web-devs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}