{
  "hash": "3634d2865a88e0e4ecdf92dd923811df",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: HTML for non-web developers\ndate: 2024-03-28\nexecute: \n  echo: true\n  eval: true\n  freeze: auto\n  output: \"markup\"\ncategories: [skills, beginner, HTML, JSON, XML]\neditor_options: \n  chunk_output_type: console\nbibliography: references.bib\n---\n\n::: {.cell layout-align=\"left\"}\nNo feedback found for this session\n:::\n\n```{=html}\n<style>\n.container{\n  display: flex;\n}\n.col {\n  flex: 1;\n}\n</style>\n```\n\n\n\n\n\n## HTML?\n\n+ = HyperText Markup Language\n+ [developed around 1990](https://www.w3.org/People/Raggett/book4/ch02.html)\n+ since c. 1993, the standard language for writing web pages\n\n## HTML structure\n\n+ HTML is based on **tags**\n+ tags add information to text\n+ to make a heading in HTML, we'd take our heading text, and surround it with `h2` tags:\n  + `<h2>This is my heading</h2>`\n+ [hundreds of tags in use](https://www.w3schools.com/html/)\n\n## But!\n\n+ this session isn't going to teach you loads of tags\n- for web developers, yes, do learn them! (also all the css and java that are used to display and style the information in the html)\n- but for everyone else - it's being able to pick out the tag-based structure that's useful\n-   family of similar languages (XML, JSON) that operate in a similar way\n\n## Why do this?\n\n-   HTML is mainly used to write websites\n-   So why bother with HTML if you don't?\n\n[![image: publicdomainvectors.org](images/paste-1FA5FE08.png){fig-alt=\"Swiss Army Knife\" fig-align=\"center\"}](https://publicdomainvectors.org/en/free-clipart/Army-knife/40628.html)\n\n## What makes HTML generically useful?\n\n-   tags lend themselves to **semantic markup**\n-   Say what an element is, rather than how it should look\n![Word's styles are a nice example of semantic markup](images/paste-6455FB13.png){fig-align=\"center\" width=\"435\"}\n\n...and not\n\n![But random formatting in Word isn't semantic](images/paste-0F330FC6.png){fig-align=\"center\" width=\"386\"}\n\n## Where might you find HTML?\n\n::: container\n::: col\n![](images/paste-AA28A197.png){fig-align=\"center\" width=\"300\"}\n:::\n\n::: col\n![](images/paste-E71FE4A5.png){fig-align=\"center\" width=\"300\"}\n:::\n:::\n\n(not surprising)\n\n\n\n::: container\n::: col\n![](images/paste-4D2540F7.png){fig-align=\"center\" width=\"300\"}\n:::\n\n::: col\n![](images/paste-567DEABA.png){fig-align=\"center\" width=\"300\"}\n:::\n:::\n\n(possibly surprising)\n\n## Make some HTML\n\n::: {.callout-tip title=\"Task\"}\n-   Create a text file in Windows Notepad (or other text editor)\n-   add some text\n-   save that file with the `.html` file extension\n-   open in your web browser\n:::\n\n\n## What does it look like?\n\n![HTML doesn't respect whitespace, formatting, etc](images/paste-403D7E6E.png){fig-align=\"center\" width=\"800\"}\n\n## Add some tags\n\n+ reminder: tags are how we add information to the text\n\n::: {.callout-tip title=\"Task\"}\n- add some line-breaks with `</br>`\n- add a horizontal line with `<hr>`\n:::\n\n## Paired tags\n\n+ most HTML tags are paired, with a `<start>` and `</stop>` component\n\n::: {.callout-tip title=\"Task\"}\n- add a heading with `<h1>Heading</h1>`\n- add a link with `<a href=\"URL\">Link</a>`\n:::\n\n\n## Images\n\n+ we can also put extra information inside the tag itself to control how our HTML works. Images are a nice example. You start with a simple `<img>` tag, and then add components. For example, you'll nearly always supply the web address of your image:\n\n`<img src=\"https://i.imgur.com/OpmMr44.jpg\">`\n<img src=\"https://i.imgur.com/OpmMr44.jpg\">\n\nYou can also resize the image using HTML, by adding height/width info to the tag:\n\n`<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\">`\n<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\">\n\nAnd you can play with the alignment, padding, etc etc: \n\n`<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\" ALIGN=\"left\" HSPACE=\"15\" VSPACE=\"25\"/>`\n\n<img src=\"https://i.imgur.com/OpmMr44.jpg\" height=\"300\" align=\"left\" hspace=\"15\" vspace=\"25\"/>\n\n(this goes a bit wonky in the quarto we use to build the training pages - definitely worth trying out yourself in your HTML file)\n</br></br></br></br></br></br></br></br></br>\n## Tables\n\nTables are built by using several tags in concert. Say you want to re-build this bit of KIND network archaeology from a couple of years ago:\n\n| Webinar                    | Date              |\n|----------------------------|-------------------|\n| Nov 2022 (R)               | 2022-11-16, 2-3pm |\n| Dec 2022 (KIND conference) | 2022-12-07, 1-5pm |\n\nYou'll need a few different tags:\n\n+ `<table>` to start the whole thing off\n+ `<thead>` to write the (different looking) header row\n+ `<tbody>` to contain the body of the table\n+ `<tr>` to describe what should go in a row\n+ `<th>` to describe individual values\n\nThe trick is that they are nested together, so for a one-cell table with a header you might go like this:\n\n`<table><tbody><tr><th>Bit of content</th></tr></tbody></table>`\n<table><tbody><tr><th>Bit of content</th></tr></tbody></table>\n\nBack to our proper example, following the same idea about nesting:\n```         \n<table>\n  <thead>\n    <tr class=\"header\">\n      <th align=\"left\">Webinar</th>\n      <th align=\"left\">Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"left\">Nov 2022 (R)</td>\n      <td align=\"left\">2022-11-16, 2-3pm</td>\n    </tr>\n      <td align=\"left\">Dec 2022 (KIND conference)</td>\n      <td align=\"left\">2022-12-07, 1-5pm</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n<table>\n  <thead>\n    <tr class=\"header\">\n      <th align=\"left\">Webinar</th>\n      <th align=\"left\">Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"left\">Nov 2022 (R)</td>\n      <td align=\"left\">2022-11-16, 2-3pm</td>\n    </tr>\n      <td align=\"left\">Dec 2022 (KIND conference)</td>\n      <td align=\"left\">2022-12-07, 1-5pm</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n## Practical example: Data munging\n\n1.  (the hard bit) make/find an HTML version of your document\n    1.  Take a lot of links in a document\n    2.  Save the Word doc as html and tidy it up\n2.  Open that webpage source using Notepad\n3.  Paste html code into Excel\n4.  Delete the columns you don't need. (try F5, selecting 'Special', then 'Blanks', then Ctrl+-)\n5.  Use Text to Columns tool to remove html bits (split on `\"`)\n\n## Practical example: parsing HTML to extract data\n\n- you often want to pull data out of HTML-based sources, like webpages. We'd call that **parsing HTML**. Here's a mini-example in R:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\n\"<p>This is some text. This is <b>bold!</b></p>\" |>\n  read_html() |>\n  xml_text(trim = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is some text. This is bold!\"\n```\n\n\n:::\n:::\n\n\n\n\n\n- the advice here is to use a proper tool, rather than trying to dig all the content out of the tags yourself by e.g. finding and replacing\n- definitely worth reading this in-depth and entertaining thread about the issue: [\"You can't parse \\[X\\]HTML with regex\"](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"skills/data/doc_links.htm\") |>\n  xml2::read_html() |>\n  xml2::xml_find_all(\"//@href\") |>\n  xml2::as_list() |>\n  purrr::flatten() |>\n  unlist() |>\n  sample(5) # just a random sample of five to avoid overload\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://587.example.com\" \"https://170.example.com\"\n[3] \"https://437.example.com\" \"https://166.example.com\"\n[5] \"https://661.example.com\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "HTML_non-web-devs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}