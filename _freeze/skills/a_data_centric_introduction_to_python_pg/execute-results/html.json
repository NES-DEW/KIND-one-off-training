{
  "hash": "36ac71481fca3af6fac65d2762946fb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A Data-Centric Introduction to Python\nexecute: \n  echo: true\n  output: true\n  freeze: true\nbibliography: references.bib\ncategories: [python, beginner]\n---\n\n\n```{.r .cell-code}\nsource(here::here(\"R/feed_block.R\"))\nfeed_block(\"A data-centric introduction to Python\")\n```\n\n  \n## Previous attendees have said...  \n- 14 previous attendees have left feedback\n- 100% said that this session was pitched correctly\n- 93% would recommend this session to a colleague\n  \n:::{.callout-note}  \n### Three random comments from previous attendees  \n- hapPy to see practical contrast of Py with R\n- A useful taster session with helpful links to further resources\n- useful warts and all demonstration of python for python novices\n  \n:::  \n\n\n\n\n\n\nA note on this mixed R/Python Quarto file: the text and Python sections were written in a Jupyter notebook, then converted into a Quarto document by:\n\n`quarto convert a_data_centric_introduction_to_python.ipynb`\n\nR sections, and the tabsets were added, and the document was then knitted using R Quarto in Rstudio by attaching the reticulate [@reticulate] package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# A data-centric introduction to Python\n\nThis is a friendly beginner session introducing users to Python. It's health-and-social-care opinionated, assumes no previous Python knowledge, and will have lots of scope for practical demonstrations. Given that lots of users in the KIND network will have some prior experience of R, we'll introduce some key Python features by comparison with R\n\n# Session structure\n\n-   a brief general-purpose chat for intro to the language\n-   how to read and write Python (jupyter/VS Code/Posit workbench/positron)\n-   a side-note about Excel Python\n-   Python for R developers - a practical demonstration\n\n## Python introduction\n\n-   [\"Python is a high-level, general-purpose programming language.\"](https://en.wikipedia.org/wiki/Python_(programming_language))\n-   massive user-base\n-   highly extensible and flexible ($10^5$ modules)\\\n-   the [second-best language for everything](https://www.youtube.com/watch?v=OkuGfa3zcL8)\n-   multi-paradigm (oop, structured, ...)\n\n# Reading and writing Python\n\n-   you'll need:\n    -   Python, [currently at 3.12](https://docs.python.org/release/3.12.4/)\n    -   (almost certainly) something to manage modules - like [pip](https://pypi.org/project/pip/) or [conda](https://conda.io/projects/conda/en/latest/user-guide/install/index.html)\n    -   (almost certainly) an integrated development environment. Loads of options:\n        -   practical demo of [Jupyter labs](https://jupyter.org/)\n        -   non-free use in [posit.cloud](https://posit.cloud)\n        -   Rstudio via [reticulate](https://cran.r-project.org/web/packages/reticulate/index.html) / Jupyter\n        -   [VSCode](https://code.visualstudio.com/), which is pretty well industry standard for the wider Python ecosystem\n        -   [positron](https://github.com/posit-dev/positron), which is the new kid for data-flavoured Python work\n\n## Excel Python\n\n-   Python is coming to Excel, apparently...\n    -   roll-out slower than expected\n-   gives an alternative to VBA etc\n-   code gets executed in the cloud, so no infrastructure faff...\n    -   but a potential information governance headache\n-   on the offchance that you have it available, `=PY()` is the key function\n    -   see [\"hello world!\"-type walkthrough](https://support.microsoft.com/en-gb/office/get-started-with-python-in-excel-a33fbcbe-065b-41d3-82cf-23d05397f53d)\n\n## Python for R people\n\nYou're welcome to follow along using the free basic Python set-up at [W3schools](https://www.w3schools.com/python/trypython.asp?filename=demo_default)\n\n-   \"hello world!\"\n-   indents vs brackets\n-   Rmarkdown vs Jupyter\n-   packages vs modules - for data from csv comparison\n-   basic work with tabular data - for methods\n-   vector/tibble/list vs list/tuple/dict/set - for vectorisation vs list comps\n-   pandas for tabular data\n-   plotting comparison\n\n## \"hello world!\"\n\nInitially, there's very little to choose between R and Python, and everything is likely to feel very familiar..\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"hello world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhello world!\n```\n\n\n:::\n\n```{.python .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3\n```\n\n\n:::\n\n```{.python .cell-code}\nhw = \"hello \" + \"world\" + \"!\"\nhw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'hello world!'\n```\n\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello world\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello world\"\n```\n\n\n:::\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nhw <- paste(\"hello\", \"world\", \"!\")\nhw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello world !\"\n```\n\n\n:::\n:::\n\n:::\n\n## Indents\n\n-   a first big difference: indents *matter* in Python\n-   they're non-optional with proper syntactic function\n    -   broadly correspond to curly brackets in R\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nword = \"care\"\n\nif word == \"care\":\n    print(\"I have found someone from care\")\nelse:\n    print(\"No, I haven't found anyone from care\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nI have found someone from care\n```\n\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword <- \"care\"\n\nif (word == \"care\") {\n  print(\"I have found someone from care\")\n} else {\n  print(\"No, I haven't found anyone from care\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I have found someone from care\"\n```\n\n\n:::\n:::\n\n:::\n\n## Rmarkdown/Quarto vs Jupyter\n\n-   Jupyter provides interactive code- and markdown editing. Compare to the render/knit-based workflow of qmd/Rmd\n-   web-based, so perhaps more like posit.cloud / workbench than Rstudio\n-   comparatively harder to edit .ipynb files than .Rmd/.qmd in other tools\n\n## Packages vs modules\n\nWe'll load the [pandas](https://pandas.pydata.org/docs/reference/api/pandas.Index.html) module in Python, and the readr package in R [@readr] to compare and contrast loading external functions. We'll use those to read some sample data (the KIND book of the week dataset).\n\n::: panel-tabset\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw_dat = \"https://raw.githubusercontent.com/NES-DEW/KIND-community-standards/main/data/KIND_book_of_the_week.csv\"\n\nimport pandas\nbotw = pandas.read_csv(botw_dat)\n```\n:::\n\n\nBut we also have a lot of options for loading modules. We can alias, most usefully to give us short names for commonly-used functions:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nbotw = pd.read_csv(botw_dat)\n```\n:::\n\n\nWe could even load an individual function from a module:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pandas import read_csv as read_csv\nbotw = read_csv(botw_dat)\n\n# one minor bit of cheating - we'll coerce the Year column to numeric\nbotw = botw.replace(\"1979 (1935)\", 1979)\nbotw[\"Year\"] = pandas.to_numeric(botw[\"Year\"])\n```\n:::\n\n\n### R\n\nThere are comparatively fewer options for package loading in R. You'd traditionally attach a whole package using `library`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\nbotw_dat <- \"https://raw.githubusercontent.com/NES-DEW/KIND-community-standards/main/data/KIND_book_of_the_week.csv\"\n\nbotw <- read_csv(botw_dat)\n```\n:::\n\n\nYou can load individual functions by namespacing via `::`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbotw <- readr::read_csv(botw_dat)\n```\n:::\n\n\nIt is also possible, although non-standard, to alias individual functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsteve <- readr::read_csv\nbotw <- steve(botw_dat)\n```\n:::\n\n:::\n\n## Fun with tabular data\n\nDoing some basic playing with our tabular data shows that Python uses methods - like a local version of a functions that are specific to certain types of object. While methods [can be used in R](https://stat.ethz.ch/R-manual/R-devel/library/methods/html/Methods_Details.html), in practice most R code relies on functions.\n\n\n::: panel-tabset\n### Python\n\nBoth [`shape`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html) and [`index`](https://pandas.pydata.org/docs/reference/api/pandas.Index.html) are methods that we've imported from pandas. They'll only work in pandas objects, which we'll talk about more below.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.shape # shape is a method\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(19, 8)\n```\n\n\n:::\n\n```{.python .cell-code}\nlen(botw.index) # as is index\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n19\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.shape[0] # Python is 0-indexed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n19\n```\n\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(botw) # dim is a function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19  8\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(botw) # as is nrow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(botw)[1] # Python is 1-indexed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n:::\n\n## Data types\n\n::: panel-tabset\n### Python\n\n-   there are four basic data types in Python\n  - list\n  - tuple\n  - dict\n  - set\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers_list = [1,2,3,4,5] # changeable\nnumbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1, 2, 3, 4, 5]\n```\n\n\n:::\n\n```{.python .cell-code}\nnumbers_tuple = (1,2,3,4,5) # unchangeable\nnumbers_tuple\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1, 2, 3, 4, 5)\n```\n\n\n:::\n\n```{.python .cell-code}\nnumbers_dict = {\"one\":1, \"two\":2, \"three\":3} # changeable (now), no duplicates\nnumbers_dict\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{'one': 1, 'two': 2, 'three': 3}\n```\n\n\n:::\n\n```{.python .cell-code}\nnumbers_set = {1,2,3,4,5} # unchangeable, no duplicates\nnumbers_set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{1, 2, 3, 4, 5}\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Modify in place semantics\nnumbers_list.reverse()\n```\n:::\n\n\n### R\n\n-   R has [several basic data types](http://adv-r.had.co.nz/Data-structures.html), but in practice only three are commonly encountered. These are the vector, the data frame, and the list (confusing!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers_vector <- c(1,2,3,4,5)\nnumbers_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nnumbers_dataframe <- data.frame(nums = numbers_vector)\nnumbers_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nums\n1    1\n2    2\n3    3\n4    4\n5    5\n```\n\n\n:::\n\n```{.r .cell-code}\nnumbers_list <- list(numbers_vector, numbers_dataframe)\nnumbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n  nums\n1    1\n2    2\n3    3\n4    4\n5    5\n```\n\n\n:::\n:::\n\n:::\n\n## Loops, list comprehensions, and vectorization\n\nThere are various methods for repeatedly running code. We'll demonstrate a couple of simple methods here. Note that both Python and R have rich and powerful functional programming tools available (like `map`), but we'll park those for now.\n\n::: panel-tabset\n### Python\n\nYou'll need to use loops, or (much nicer) list comprehension in Python. There's no exact counterpart of R's vectorized functions:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndouble_numbers_loop = []\n\nfor n in numbers_list:\n    double_numbers_loop.append(n * 2)\n\ndouble_numbers_loop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[10, 8, 6, 4, 2]\n```\n\n\n:::\n:::\n\n\n## List comprehension\n\nLike a lovely lightweight loop syntax\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndouble_numbers_list =  [n*2 for n in numbers_list]\ndouble_numbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[10, 8, 6, 4, 2]\n```\n\n\n:::\n\n```{.python .cell-code}\n# and, more fancy...\ndouble_even_numbers_list =  [n*2 for n in numbers_list if (n%2 == 0) ]\ndouble_even_numbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[8, 4]\n```\n\n\n:::\n:::\n\n\n### R\n\nBy and large, R is at its best with vectorized functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndouble_numbers_vector <- numbers_vector * 2\ndouble_numbers_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n:::\n\n\nLoops are possible too\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndouble_numbers_loop <- vector(\"numeric\", length = length(numbers_vector))\n\nfor (i in numbers_vector) {\n  double_numbers_loop[i] <- i * 2\n}\n```\n:::\n\n\nR has [copy-on-modify semantics](https://stackoverflow.com/questions/15759117/what-exactly-is-copy-on-modify-semantics-in-r-and-where-is-the-canonical-source), and so care needs to be taken to avoid writing poorly-performing loops. That means that loops are used comparatively rarely in R.\n:::\n\n## Tabular data basics\n\n::: panel-tabset\n### Python\n\n-   we'll do a quick overview of pandas, based on [their excellent 10 minute overview](https://pandas.pydata.org/docs/user_guide/10min.html)\n-   our `botw` object is a DataFrame, which is based on a dict\n    -   like tibbles, DataFrames can contain columns of different types\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.dtypes # find out what we're dealing with\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDate                object\nAuthor              object\nYear                 int64\nTitle               object\nISBN                 int64\nWorldcat            object\nKnowledgeNetwork    object\nDescription         object\ndtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.head() # shows first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date  ...                                        Description\n0  06/03/2024  ...  The Code Book: The Secret History of Codes and...\n1  13/03/2024  ...  Here's a book of the week suggestion following...\n2  20/03/2024  ...                                                NaN\n3  27/03/2024  ...                                                NaN\n4  24/04/2024  ...  We're looking at regular expressions in the co...\n\n[5 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.index # effectively counts rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRangeIndex(start=0, stop=19, step=1)\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.columns # gives column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['Date', 'Author', 'Year', 'Title', 'ISBN', 'Worldcat',\n       'KnowledgeNetwork', 'Description'],\n      dtype='object')\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.describe() # simple summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Year          ISBN\ncount    19.000000  1.900000e+01\nmean   2006.578947  9.781072e+12\nstd      11.196804  6.773329e+08\nmin    1979.000000  9.780140e+12\n25%    2000.500000  9.780366e+12\n50%    2011.000000  9.781409e+12\n75%    2016.000000  9.781688e+12\nmax    2019.000000  9.781857e+12\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.sort_values(\"Year\") # sorting by column values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date  ...                                        Description\n9   29/05/2024  ...  If last week's book was a paean to the use of ...\n2   20/03/2024  ...                                                NaN\n6   08/05/2024  ...  After the discussion last week about the troub...\n0   06/03/2024  ...  The Code Book: The Secret History of Codes and...\n15  10/07/2024  ...  There are a lot of statistics textbooks out th...\n12  19/06/2024  ...  Last week's recommendation about agnotology sp...\n13  26/06/2024  ...  We're still on a mini-exploration of manufactu...\n10  05/06/2024  ...  It's now close to twenty years old, and deals ...\n7   15/05/2024  ...  If I was posh enough to have a Latin motto, it...\n1   13/03/2024  ...  Here's a book of the week suggestion following...\n18  07/08/2024  ...  This is an excellent introduction to disease g...\n11  12/06/2024  ...  While the word [agnotology](https://simple.wik...\n16  17/07/2024  ...  This book suggestion comes from a conversation...\n17  31/07/2024  ...  If you've ever been stunned by an unexpectedly...\n4   24/04/2024  ...  We're looking at regular expressions in the co...\n3   27/03/2024  ...                                                NaN\n8   22/05/2024  ...  A love-letter to the power of domain knowledge...\n14  03/07/2024  ...  This week's BotW suggestion comes from Anna Sc...\n5   01/05/2024  ...  Anyone who works with data knows that our data...\n\n[19 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[\"Date\"] # selecting a column and creating a series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0     06/03/2024\n1     13/03/2024\n2     20/03/2024\n3     27/03/2024\n4     24/04/2024\n5     01/05/2024\n6     08/05/2024\n7     15/05/2024\n8     22/05/2024\n9     29/05/2024\n10    05/06/2024\n11    12/06/2024\n12    19/06/2024\n13    26/06/2024\n14    03/07/2024\n15    10/07/2024\n16    17/07/2024\n17    31/07/2024\n18    07/08/2024\nName: Date, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[2:4] # subsetting by index using a slice and returning a DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date          Author  ...  KnowledgeNetwork Description\n2  20/03/2024   David Oldroyd  ...               NaN         NaN\n3  27/03/2024  Katrine Marçal  ...               NaN         NaN\n\n[2 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[[\"Date\"]] # subsetting entire columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date\n0   06/03/2024\n1   13/03/2024\n2   20/03/2024\n3   27/03/2024\n4   24/04/2024\n5   01/05/2024\n6   08/05/2024\n7   15/05/2024\n8   22/05/2024\n9   29/05/2024\n10  05/06/2024\n11  12/06/2024\n12  19/06/2024\n13  26/06/2024\n14  03/07/2024\n15  10/07/2024\n16  17/07/2024\n17  31/07/2024\n18  07/08/2024\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.loc[4] # subsetting by index using a slice and returning a series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDate                                                       24/04/2024\nAuthor                                                       Tom Lean\nYear                                                             2016\nTitle               Electronic Dreams: How 1980s Britain Learned t...\nISBN                                                    9781472918338\nWorldcat                  https://search.worldcat.org/title/907966036\nKnowledgeNetwork                                                  NaN\nDescription         We're looking at regular expressions in the co...\nName: 4, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.loc[4, [\"Author\", \"Year\"]] # subsetting by index and columns and returning a DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAuthor    Tom Lean\nYear          2016\nName: 4, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[botw[\"Year\"] > 2010].sort_values(\"Year\") # subsetting by years, and sorting\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date  ...                                        Description\n1   13/03/2024  ...  Here's a book of the week suggestion following...\n18  07/08/2024  ...  This is an excellent introduction to disease g...\n16  17/07/2024  ...  This book suggestion comes from a conversation...\n11  12/06/2024  ...  While the word [agnotology](https://simple.wik...\n4   24/04/2024  ...  We're looking at regular expressions in the co...\n3   27/03/2024  ...                                                NaN\n17  31/07/2024  ...  If you've ever been stunned by an unexpectedly...\n8   22/05/2024  ...  A love-letter to the power of domain knowledge...\n14  03/07/2024  ...  This week's BotW suggestion comes from Anna Sc...\n5   01/05/2024  ...  Anyone who works with data knows that our data...\n\n[10 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[botw[\"Author\"].isin([\"Katrine Marçal\", \"Caroline Criado Perez\"])] # finding matching values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date  ...                                        Description\n3  27/03/2024  ...                                                NaN\n5  01/05/2024  ...  Anyone who works with data knows that our data...\n\n[2 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.dropna() # removes any missing values in the whole DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date  ...                                        Description\n11  12/06/2024  ...  While the word [agnotology](https://simple.wik...\n14  03/07/2024  ...  This week's BotW suggestion comes from Anna Sc...\n15  10/07/2024  ...  There are a lot of statistics textbooks out th...\n17  31/07/2024  ...  If you've ever been stunned by an unexpectedly...\n\n[4 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[\"Title\"].str.lower() # returning the title column as a lower-case series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0                                         the code book\n1                                    ghost in the wires\n2                                 the arch of knowledge\n3                        who cooked adam smith's dinner\n4     electronic dreams: how 1980s britain learned t...\n5     invisible women: exposing data bias in a world...\n6                        the mismeasure of man (2nd ed)\n7        being wrong: adventures in the margin of error\n8     bad blood: secrets and lies in a silicon valle...\n9          genesis and development of a scientific fact\n10    in the beginning was the worm : finding the se...\n11                                   merchants of doubt\n12    harvey's heart: the discovery of blood circula...\n13    dark remedy: the impact of thalidomide and its...\n14                                how emotions are made\n15                       medical statistics at a glance\n16                               the half-life of facts\n17                          weapons of math destruction\n18                disease maps: epidemics on the ground\nName: Title, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[\"Date\"] = pandas.to_datetime(botw[\"Date\"],format='%d/%m/%Y') # fixing publication dates\nbotw.groupby(pd.DatetimeIndex(botw['Date']).month)[[\"Year\"]].mean(\"Year\") # average year of publication by month of botw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        Year\nDate        \n3     2003.0\n4     2016.0\n5     2004.4\n6     2004.5\n7     2011.5\n8     2011.0\n```\n\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # we'll need dplyr for this work\nstr(botw) # shows data types etc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [19 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date            : chr [1:19] \"06/03/2024\" \"13/03/2024\" \"20/03/2024\" \"27/03/2024\" ...\n $ Author          : chr [1:19] \"Simon Singh\" \"Kevin Mitnick\" \"David Oldroyd\" \"Katrine Marçal\" ...\n $ Year            : chr [1:19] \"1999\" \"2011\" \"1986\" \"2016\" ...\n $ Title           : chr [1:19] \"The Code Book\" \"Ghost in the Wires\" \"The Arch of Knowledge\" \"Who Cooked Adam Smith's Dinner\" ...\n $ ISBN            : num [1:19] 9.78e+12 9.78e+12 9.78e+12 9.78e+12 9.78e+12 ...\n $ Worldcat        : chr [1:19] \"https://search.worldcat.org/title/59579840\" \"https://search.worldcat.org/title/773175688\" \"https://search.worldcat.org/title/12663957\" \"https://search.worldcat.org/title/933444501\" ...\n $ KnowledgeNetwork: chr [1:19] NA NA NA NA ...\n $ Description     : chr [1:19] \"The Code Book: The Secret History of Codes and Code-Breaking a book by . (bookshop.org) (to buy online but supp\"| __truncated__ \"Here's a book of the week suggestion following on from the codes theme from last time. It's the autobiography o\"| __truncated__ NA NA ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_character(),\n  ..   Author = col_character(),\n  ..   Year = col_character(),\n  ..   Title = col_character(),\n  ..   ISBN = col_double(),\n  ..   Worldcat = col_character(),\n  ..   KnowledgeNetwork = col_character(),\n  ..   Description = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(botw) # shows first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  Date       Author    Year  Title    ISBN Worldcat KnowledgeNetwork Description\n  <chr>      <chr>     <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n1 06/03/2024 Simon Si… 1999  The … 9.78e12 https:/… <NA>             The Code B…\n2 13/03/2024 Kevin Mi… 2011  Ghos… 9.78e12 https:/… <NA>             Here's a b…\n3 20/03/2024 David Ol… 1986  The … 9.78e12 https:/… <NA>             <NA>       \n4 27/03/2024 Katrine … 2016  Who … 9.78e12 https:/… <NA>             <NA>       \n5 24/04/2024 Tom Lean  2016  Elec… 9.78e12 https:/… <NA>             We're look…\n6 01/05/2024 Caroline… 2019  Invi… 9.78e12 https:/… <NA>             Anyone who…\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(botw) # counts rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(botw) # column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"             \"Author\"           \"Year\"             \"Title\"           \n[5] \"ISBN\"             \"Worldcat\"         \"KnowledgeNetwork\" \"Description\"     \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(botw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Date              Author              Year              Title          \n Length:19          Length:19          Length:19          Length:19         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      ISBN             Worldcat         KnowledgeNetwork   Description       \n Min.   :9.780e+12   Length:19          Length:19          Length:19         \n 1st Qu.:9.780e+12   Class :character   Class :character   Class :character  \n Median :9.781e+12   Mode  :character   Mode  :character   Mode  :character  \n Mean   :9.781e+12                                                           \n 3rd Qu.:9.782e+12                                                           \n Max.   :9.782e+12                                                           \n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  arrange(Year) # native pipe operator in R. Piped code in Python requires modules\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 8\n   Date       Author   Year  Title    ISBN Worldcat KnowledgeNetwork Description\n   <chr>      <chr>    <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n 1 29/05/2024 Ludwig … 1979… Gene… 9.78e12 https:/… <NA>             \"If last w…\n 2 20/03/2024 David O… 1986  The … 9.78e12 https:/… <NA>              <NA>      \n 3 08/05/2024 Stephen… 1996  The … 9.78e12 https:/… <NA>             \"After the…\n 4 06/03/2024 Simon S… 1999  The … 9.78e12 https:/… <NA>             \"The Code …\n 5 10/07/2024 Aviva P… 2000  Medi… 9.78e12 https:/… https://nhs.pri… \"There are…\n 6 19/06/2024 Andrew … 2001  Harv… 9.78e12 https:/… <NA>             \"Last week…\n 7 26/06/2024 Trent D… 2001  Dark… 9.78e12 https:/… <NA>             \"We're sti…\n 8 05/06/2024 Andrew … 2004  In t… 9.78e12 https:/… <NA>             \"It's now …\n 9 15/05/2024 Kathryn… 2010  Bein… 9.78e12 https:/… <NA>             \"If I was …\n10 13/03/2024 Kevin M… 2011  Ghos… 9.78e12 https:/… <NA>             \"Here's a …\n11 07/08/2024 Tom Koch 2011  Dise… 9.78e12 https:/… <NA>             \"This is a…\n12 12/06/2024 Naomi O… 2012  Merc… 9.78e12 https:/… https://nhs.pri… \"While the…\n13 17/07/2024 Samuel … 2012  The … 9.78e12 https:/… <NA>             \"This book…\n14 27/03/2024 Katrine… 2016  Who … 9.78e12 https:/… <NA>              <NA>      \n15 24/04/2024 Tom Lean 2016  Elec… 9.78e12 https:/… <NA>             \"We're loo…\n16 31/07/2024 Cathy O… 2016  Weap… 9.78e12 https:/… https://nhs.pri… \"If you've…\n17 22/05/2024 John Ca… 2018  Bad … 9.78e12 https:/… <NA>             \"A love-le…\n18 03/07/2024 Lisa Fe… 2018  How … 9.78e12 https:/… https://nhs.pri… \"This week…\n19 01/05/2024 Carolin… 2019  Invi… 9.78e12 https:/… <NA>             \"Anyone wh…\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw$Date # selecting a column as a vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"06/03/2024\" \"13/03/2024\" \"20/03/2024\" \"27/03/2024\" \"24/04/2024\"\n [6] \"01/05/2024\" \"08/05/2024\" \"15/05/2024\" \"22/05/2024\" \"29/05/2024\"\n[11] \"05/06/2024\" \"12/06/2024\" \"19/06/2024\" \"26/06/2024\" \"03/07/2024\"\n[16] \"10/07/2024\" \"17/07/2024\" \"31/07/2024\" \"07/08/2024\"\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  slice(3:4) # subsetting by index using slice and returning a tibble Note different indexing behaviour\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  Date       Author    Year  Title    ISBN Worldcat KnowledgeNetwork Description\n  <chr>      <chr>     <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n1 20/03/2024 David Ol… 1986  The … 9.78e12 https:/… <NA>             <NA>       \n2 27/03/2024 Katrine … 2016  Who … 9.78e12 https:/… <NA>             <NA>       \n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  select(Date) # subsetting entire columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 1\n   Date      \n   <chr>     \n 1 06/03/2024\n 2 13/03/2024\n 3 20/03/2024\n 4 27/03/2024\n 5 24/04/2024\n 6 01/05/2024\n 7 08/05/2024\n 8 15/05/2024\n 9 22/05/2024\n10 29/05/2024\n11 05/06/2024\n12 12/06/2024\n13 19/06/2024\n14 26/06/2024\n15 03/07/2024\n16 10/07/2024\n17 17/07/2024\n18 31/07/2024\n19 07/08/2024\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(botw[5,]) # subsetting by index and coercing to a vector. This is pretty non-idiomatic in R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nn[2] \"Tom Leannn[4] \"Electronic Dreams: How 1980s Britain Learned to Love the Computern[5] \"9781472918338\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n[6] \"https://search.worldcat.org/titlenn[8] \"We're looking at regular expressions in the community meetup today. Regex, as the wikipedia page suggests, have been around for ages - positively archaeological in computing terms. So for the book of the week this week, I wanted to show off one of the most interesting bits of social history I've read: Tom Lean's Electronic Dreams. Lots of the history of computing is either primarily about the technical details, or is a broadly nostalgic look at obsolete tech. This book doesn't do either of those, instead spending its time giving a concise account of how personal computing worked as a social phenomenon. For example, how did people start getting paid to write computer games? What happened when the BBC got involved in personal computing? What happened to the various promises of digital revolutions as a replacement for manufacturing industries.\"\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw[5,] |>\n  select(Author, Year) # subsetting by index and columns and returning a tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  Author   Year \n  <chr>    <chr>\n1 Tom Lean 2016 \n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  filter(Year > 2010) |>\n  arrange(Year) # subsetting by filtering years, then sorting using dplyr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   Date       Author   Year  Title    ISBN Worldcat KnowledgeNetwork Description\n   <chr>      <chr>    <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n 1 13/03/2024 Kevin M… 2011  Ghos… 9.78e12 https:/… <NA>             \"Here's a …\n 2 07/08/2024 Tom Koch 2011  Dise… 9.78e12 https:/… <NA>             \"This is a…\n 3 12/06/2024 Naomi O… 2012  Merc… 9.78e12 https:/… https://nhs.pri… \"While the…\n 4 17/07/2024 Samuel … 2012  The … 9.78e12 https:/… <NA>             \"This book…\n 5 27/03/2024 Katrine… 2016  Who … 9.78e12 https:/… <NA>              <NA>      \n 6 24/04/2024 Tom Lean 2016  Elec… 9.78e12 https:/… <NA>             \"We're loo…\n 7 31/07/2024 Cathy O… 2016  Weap… 9.78e12 https:/… https://nhs.pri… \"If you've…\n 8 22/05/2024 John Ca… 2018  Bad … 9.78e12 https:/… <NA>             \"A love-le…\n 9 03/07/2024 Lisa Fe… 2018  How … 9.78e12 https:/… https://nhs.pri… \"This week…\n10 01/05/2024 Carolin… 2019  Invi… 9.78e12 https:/… <NA>             \"Anyone wh…\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw[which(botw$Author %in% c(\"Katrine Marçal\", \"Caroline Criado Perez\")),] # finding matching values using base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  Date       Author    Year  Title    ISBN Worldcat KnowledgeNetwork Description\n  <chr>      <chr>     <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n1 27/03/2024 Katrine … 2016  Who … 9.78e12 https:/… <NA>             <NA>       \n2 01/05/2024 Caroline… 2019  Invi… 9.78e12 https:/… <NA>             Anyone who…\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  tidyr::drop_na() # removes any missing values in the whole tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 8\n  Date       Author    Year  Title    ISBN Worldcat KnowledgeNetwork Description\n  <chr>      <chr>     <chr> <chr>   <dbl> <chr>    <chr>            <chr>      \n1 12/06/2024 Naomi Or… 2012  Merc… 9.78e12 https:/… https://nhs.pri… While the …\n2 03/07/2024 Lisa Fel… 2018  How … 9.78e12 https:/… https://nhs.pri… This week'…\n3 10/07/2024 Aviva Pe… 2000  Medi… 9.78e12 https:/… https://nhs.pri… There are …\n4 31/07/2024 Cathy O'… 2016  Weap… 9.78e12 https:/… https://nhs.pri… If you've …\n```\n\n\n:::\n\n```{.r .cell-code}\nbotw$Title |>\n  tolower() # returning the title column as a lower-case vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"the code book\"                                                                      \n [2] \"ghost in the wires\"                                                                 \n [3] \"the arch of knowledge\"                                                              \n [4] \"who cooked adam smith's dinner\"                                                     \n [5] \"electronic dreams: how 1980s britain learned to love the computer\"                  \n [6] \"invisible women: exposing data bias in a world designed for men\"                    \n [7] \"the mismeasure of man (2nd ed)\"                                                     \n [8] \"being wrong: adventures in the margin of error\"                                     \n [9] \"bad blood: secrets and lies in a silicon valley startup\"                            \n[10] \"genesis and development of a scientific fact\"                                       \n[11] \"in the beginning was the worm : finding the secrets of life in a tiny hermaphrodite\"\n[12] \"merchants of doubt\"                                                                 \n[13] \"harvey's heart: the discovery of blood circulation\"                                 \n[14] \"dark remedy: the impact of thalidomide and its revival as a vital medicine\"         \n[15] \"how emotions are made\"                                                              \n[16] \"medical statistics at a glance\"                                                     \n[17] \"the half-life of facts\"                                                             \n[18] \"weapons of math destruction\"                                                        \n[19] \"disease maps: epidemics on the ground\"                                              \n```\n\n\n:::\n\n```{.r .cell-code}\nbotw |>\n  mutate(Date = lubridate::dmy(Date)) |> # fixing publication dates\n  group_by(month = lubridate::floor_date(Date, unit = \"month\")) |>\n  summarise(mean_year = mean(as.numeric(Year), na.rm = T)) # average year of publication by month of botw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  month      mean_year\n  <date>         <dbl>\n1 2024-03-01     2003 \n2 2024-04-01     2016 \n3 2024-05-01     2011.\n4 2024-06-01     2004.\n5 2024-07-01     2012.\n6 2024-08-01     2011 \n```\n\n\n:::\n:::\n\n:::\n\n## Plots\n\n::: panel-tabset\n### Python\n\nUsing [matplotlib](https://matplotlib.org/3.1.1/index.html)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.hist(botw[\"Year\"], bins = [1970, 1980, 1990, 2000, 2010, 2020])\n\nplt.title(\"The KIND network BotW is biased towards newer books\")\n```\n\n::: {.cell-output-display}\n![](a_data_centric_introduction_to_python_pg_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nbotw |>\n  mutate(Year = readr::parse_number(Year)) |>\n  ggplot() +\n  geom_histogram(aes(x = Year), fill=\"#1F77B4\", binwidth = 10, center = 1985) +\n  ggtitle(\"The KIND network BotW is biased towards newer books\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](a_data_centric_introduction_to_python_pg_files/figure-html/unnamed-chunk-26-3.png){width=672}\n:::\n:::\n\n\n:::\n",
    "supporting": [
      "a_data_centric_introduction_to_python_pg_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}