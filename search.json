[
  {
    "objectID": "r_training/we_heart_janitor.html",
    "href": "r_training/we_heart_janitor.html",
    "title": "We ❤️ janitor",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#headline",
    "href": "r_training/we_heart_janitor.html#headline",
    "title": "We ❤️ janitor",
    "section": "Headline",
    "text": "Headline\n\nJanitor is a toolkit for tidying data\nboth input-focused and output-focused\nexcellent balance between diligence and laziness"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#setup",
    "href": "r_training/we_heart_janitor.html#setup",
    "title": "We ❤️ janitor",
    "section": "Setup",
    "text": "Setup\n\nlibrary(janitor)\nlibrary(readxl)\n\ntest_df &lt;- as.data.frame(matrix(ncol = 6))\nnames(test_df) &lt;- c(\"firstName\", \"ábc@!*\", \"% successful (2009)\",\n                    \"REPEAT VALUE\", \"REPEAT VALUE\", \"\")\n\ntest_df |&gt;\n  clean_names(case = \"upper_lower\") |&gt;\n  select(FIRSTname)\n\n  FIRSTname\n1        NA\n\n\n\nexample column names from https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#clean_names",
    "href": "r_training/we_heart_janitor.html#clean_names",
    "title": "We ❤️ janitor",
    "section": "clean_names",
    "text": "clean_names\n\nclean_names(test_df)\n\n  first_name abc percent_successful_2009 repeat_value repeat_value_2  x\n1         NA  NA                      NA           NA             NA NA"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#clean_names-1",
    "href": "r_training/we_heart_janitor.html#clean_names-1",
    "title": "We ❤️ janitor",
    "section": "clean_names",
    "text": "clean_names\n\nclean_names(test_df, case = \"screaming_snake\")\n\n  FIRST_NAME ABC PERCENT_SUCCESSFUL_2009 REPEAT_VALUE REPEAT_VALUE_2  X\n1         NA  NA                      NA           NA             NA NA"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#clean_names-2",
    "href": "r_training/we_heart_janitor.html#clean_names-2",
    "title": "We ❤️ janitor",
    "section": "clean_names",
    "text": "clean_names\n\nclean_names(test_df, case = \"big_camel\")\n\n  FirstName Abc PercentSuccessful2009 RepeatValue RepeatValue_2  X\n1        NA  NA                    NA          NA            NA NA\n\ntest_df %&gt;%\n  # clean_names() %&gt;%\n  clean_names(prefix = \"a_prefix\")\n\n  a_prefixfirst_name a_prefixabc a_prefixpercent_successful_2009\n1                 NA          NA                              NA\n  a_prefixrepeat_value a_prefixrepeat_value_2 a_prefixx\n1                   NA                     NA        NA"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#compare_df_cols",
    "href": "r_training/we_heart_janitor.html#compare_df_cols",
    "title": "We ❤️ janitor",
    "section": "compare_df_cols",
    "text": "compare_df_cols\n\nlibrary(palmerpenguins)\n\ncompare_df_cols(penguins,penguins_raw)\n       column_name penguins penguins_raw\n1 bill_depth_mm numeric  2 bill_length_mm numeric  3 Body Mass (g)  numeric 4 body_mass_g integer  5 Clutch Completion  character 6 Comments  character 7 Culmen Depth (mm)  numeric 8 Culmen Length (mm)  numeric 9 Date Egg  Date 10 Delta 13 C (o/oo)  numeric 11 Delta 15 N (o/oo)  numeric 12 Flipper Length (mm)  numeric 13 flipper_length_mm integer  14 Individual ID  character 15 island factor  16 Island  character 17 Region  character 18 Sample Number  numeric 19 sex factor  20 Sex  character 21 species factor  22 Species  character 23 Stage  character 24 studyName  character 25 year integer"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#warnings",
    "href": "r_training/we_heart_janitor.html#warnings",
    "title": "We ❤️ janitor",
    "section": "warnings",
    "text": "warnings\n\n# openxlsx::read.xlsx(\"https://github.com/NES-DEW/KIND-training/raw/main/r_training/data/JanitorDataExample.xlsx\") |&gt;\n#   janitor::make_clean_names()\nData1 &lt;- readxl::read_excel(\"data/JanitorDataExample.xlsx\", .name_repair = make_clean_names)\n\n# Data1 &lt;- readxl::read_excel(\"r_training/data/JanitorDataExample.xlsx\", .name_repair = make_clean_names)\n\n# warnings switched off, otherwise we'd have literally hundreds of warnings here!\n\nmake_clean_names(c(\"1thing\", \"some opther thign\"))\n\n[1] \"x1thing\"           \"some_opther_thign\""
  },
  {
    "objectID": "r_training/we_heart_janitor.html#warnings-1",
    "href": "r_training/we_heart_janitor.html#warnings-1",
    "title": "We ❤️ janitor",
    "section": "warnings",
    "text": "warnings\n\nglimpse(Data1)\n\nRows: 503\nColumns: 7\n$ id               &lt;dbl&gt; 100507, 104088, 105279, 105459, 108894, 109204, 10962…\n$ gender           &lt;chr&gt; \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Ma…\n$ date_of_event_1  &lt;dbl&gt; 44572, 44216, 44172, 44496, 44973, 45099, 44350, 4466…\n$ date_of_event_2  &lt;dbl&gt; 44535, 44089, 45239, 43872, 45239, 44236, 44981, 4386…\n$ location         &lt;chr&gt; \"Hospital\", \"Hospital\", \"Hospital\", \"Home\", \"Home\", \"…\n$ diagnosis_code_1 &lt;chr&gt; \"T848\", \"G992\", \"J81X\", \"R55X\", \"J459\", \"K851\", \"J441…\n$ attendances      &lt;dbl&gt; 3, 2, 4, 2, 2, 4, 2, 3, 1, 3, 3, 2, 3, 4, 3, 4, 4, 4,…"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#clean_names-again",
    "href": "r_training/we_heart_janitor.html#clean_names-again",
    "title": "We ❤️ janitor",
    "section": "clean_names again",
    "text": "clean_names again\n\nData1_clean &lt;- Data1 |&gt;\n  clean_names() |&gt;\n  mutate(across(contains(\"date\"),\n         excel_numeric_to_date)) |&gt;\n  mutate(Year = lubridate::year(date_of_event_1))\n\nData1_clean\n\n# A tibble: 503 × 8\n       id gender date_of_event_1 date_of_event_2 location diagnosis_code_1\n    &lt;dbl&gt; &lt;chr&gt;  &lt;date&gt;          &lt;date&gt;          &lt;chr&gt;    &lt;chr&gt;           \n 1 100507 Male   2022-01-11      2021-12-05      Hospital T848            \n 2 104088 Male   2021-01-20      2020-09-15      Hospital G992            \n 3 105279 Female 2020-12-07      2023-11-09      Hospital J81X            \n 4 105459 Male   2021-10-27      2020-02-11      Home     R55X            \n 5 108894 Male   2023-02-16      2023-11-09      Home     J459            \n 6 109204 Male   2023-06-22      2021-02-09      Home     K851            \n 7 109624 Male   2021-06-03      2023-02-24      Home     J441            \n 8 111454 Male   2022-04-11      2020-02-07      Home     E162            \n 9 113892 Male   2020-04-26      2023-03-06      Home     I279            \n10 114110 Male   2021-04-04      2021-05-06      Hospital M798            \n# ℹ 493 more rows\n# ℹ 2 more variables: attendances &lt;dbl&gt;, Year &lt;dbl&gt;"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#get_dupes",
    "href": "r_training/we_heart_janitor.html#get_dupes",
    "title": "We ❤️ janitor",
    "section": "get_dupes",
    "text": "get_dupes\n\nData1_clean |&gt;\n  get_dupes(contains(\"date\"))\n\n# A tibble: 6 × 9\n  date_of_event_1 date_of_event_2 dupe_count     id gender location\n  &lt;date&gt;          &lt;date&gt;               &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;   \n1 2021-10-09      2021-08-20               2 400760 Female Hospital\n2 2021-10-09      2021-08-20               2 400760 Female Hospital\n3 2022-04-04      2021-11-08               2 450284 Female Hospital\n4 2022-04-04      2021-11-08               2 450284 Female Hospital\n5 2023-06-29      2020-03-23               2 823894 Male   Home    \n6 2023-06-29      2020-03-23               2 823894 Male   Home    \n# ℹ 3 more variables: diagnosis_code_1 &lt;chr&gt;, attendances &lt;dbl&gt;, Year &lt;dbl&gt;"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#distinct",
    "href": "r_training/we_heart_janitor.html#distinct",
    "title": "We ❤️ janitor",
    "section": "distinct",
    "text": "distinct\n\nData1_clean_distinct &lt;- distinct(Data1_clean)\n\nData1_clean_distinct\n\n# A tibble: 500 × 8\n       id gender date_of_event_1 date_of_event_2 location diagnosis_code_1\n    &lt;dbl&gt; &lt;chr&gt;  &lt;date&gt;          &lt;date&gt;          &lt;chr&gt;    &lt;chr&gt;           \n 1 100507 Male   2022-01-11      2021-12-05      Hospital T848            \n 2 104088 Male   2021-01-20      2020-09-15      Hospital G992            \n 3 105279 Female 2020-12-07      2023-11-09      Hospital J81X            \n 4 105459 Male   2021-10-27      2020-02-11      Home     R55X            \n 5 108894 Male   2023-02-16      2023-11-09      Home     J459            \n 6 109204 Male   2023-06-22      2021-02-09      Home     K851            \n 7 109624 Male   2021-06-03      2023-02-24      Home     J441            \n 8 111454 Male   2022-04-11      2020-02-07      Home     E162            \n 9 113892 Male   2020-04-26      2023-03-06      Home     I279            \n10 114110 Male   2021-04-04      2021-05-06      Hospital M798            \n# ℹ 490 more rows\n# ℹ 2 more variables: attendances &lt;dbl&gt;, Year &lt;dbl&gt;"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#tabyl-adorn",
    "href": "r_training/we_heart_janitor.html#tabyl-adorn",
    "title": "We ❤️ janitor",
    "section": "tabyl / adorn",
    "text": "tabyl / adorn\n\nData1_clean_distinct |&gt;\n  tabyl(gender)\n\n gender   n percent valid_percent\n Female 285   0.570     0.5711423\n   Male 214   0.428     0.4288577\n   &lt;NA&gt;   1   0.002            NA\n\nData1_clean_distinct |&gt;\n  tabyl(gender, show_na = F)\n\n gender   n   percent\n Female 285 0.5711423\n   Male 214 0.4288577\n\nData1_clean_distinct |&gt;\n  tabyl(gender, location, Year, show_na = F) # excel pivot\n\n$`2020`\n gender Home Hospital\n Female   34       33\n   Male   24       25\n\n$`2021`\n gender Home Hospital\n Female   24       48\n   Male   28       22\n\n$`2022`\n gender Home Hospital\n Female   35       35\n   Male   22       30\n\n$`2023`\n gender Home Hospital\n Female   37       39\n   Male   25       38\n\nData1_clean_distinct |&gt;\n  tabyl(gender) |&gt;\n  class()\n\n[1] \"tabyl\"      \"data.frame\""
  },
  {
    "objectID": "r_training/we_heart_janitor.html#tabyl-adorn-1",
    "href": "r_training/we_heart_janitor.html#tabyl-adorn-1",
    "title": "We ❤️ janitor",
    "section": "tabyl / adorn",
    "text": "tabyl / adorn\n\nData1_clean_distinct |&gt;\n  tabyl(Year,gender, show_na = F) |&gt;\n  adorn_totals(\"row\") |&gt;\n  adorn_percentages(\"row\") |&gt;\n  adorn_pct_formatting() |&gt;\n  adorn_ns() |&gt;\n  adorn_title(\"combined\")\n\n Year/gender      Female        Male\n        2020 57.8%  (67) 42.2%  (49)\n        2021 59.0%  (72) 41.0%  (50)\n        2022 57.4%  (70) 42.6%  (52)\n        2023 54.7%  (76) 45.3%  (63)\n       Total 57.1% (285) 42.9% (214)"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#tabyl-adorn-2",
    "href": "r_training/we_heart_janitor.html#tabyl-adorn-2",
    "title": "We ❤️ janitor",
    "section": "tabyl / adorn",
    "text": "tabyl / adorn\n\nData1_clean_distinct |&gt;\n  tabyl(Year,gender,show_na = F) |&gt;\n  adorn_totals(\"row\") |&gt;\n  adorn_percentages(\"row\") |&gt;\n  adorn_pct_formatting() |&gt;\n  adorn_ns() |&gt;\n  # adorn_title(\"combined\") |&gt;\n  mutate(Year = paste(\"The year was\", Year))\n\n               Year      Female        Male\n  The year was 2020 57.8%  (67) 42.2%  (49)\n  The year was 2021 59.0%  (72) 41.0%  (50)\n  The year was 2022 57.4%  (70) 42.6%  (52)\n  The year was 2023 54.7%  (76) 45.3%  (63)\n The year was Total 57.1% (285) 42.9% (214)"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#tabyl-adorn-3",
    "href": "r_training/we_heart_janitor.html#tabyl-adorn-3",
    "title": "We ❤️ janitor",
    "section": "tabyl / adorn",
    "text": "tabyl / adorn\n\nData1_clean_distinct |&gt;\n  tabyl(Year,gender,show_na = F) |&gt;\n  adorn_totals(\"row\") |&gt;\n  adorn_percentages(\"row\") |&gt;\n  adorn_pct_formatting() |&gt;\n  adorn_ns(position = \"front\") |&gt;\n  adorn_title(\"combined\")\n\n Year/gender      Female        Male\n        2020  67 (57.8%)  49 (42.2%)\n        2021  72 (59.0%)  50 (41.0%)\n        2022  70 (57.4%)  52 (42.6%)\n        2023  76 (54.7%)  63 (45.3%)\n       Total 285 (57.1%) 214 (42.9%)"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#group_by-with-tabyl",
    "href": "r_training/we_heart_janitor.html#group_by-with-tabyl",
    "title": "We ❤️ janitor",
    "section": "group_by with tabyl",
    "text": "group_by with tabyl\n\nData1_clean_distinct |&gt;\n  group_by(Year,gender) |&gt;\n  summarise(Attendances = n()) |&gt;\n  filter(!is.na(Year)) |&gt;\n  pivot_wider(names_from = gender, values_from = Attendances) |&gt;\n  adorn_totals(c(\"row\",\"col\"))\n\n  Year Female Male Total\n  2020     67   49   116\n  2021     72   50   122\n  2022     70   52   122\n  2023     76   63   139\n Total    285  214   499"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#chisq.test",
    "href": "r_training/we_heart_janitor.html#chisq.test",
    "title": "We ❤️ janitor",
    "section": "chisq.test",
    "text": "chisq.test\n\nData1_clean_distinct |&gt;\n  tabyl(attendances,location,show_na = F) |&gt;\n  chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  tabyl(Data1_clean_distinct, attendances, location, show_na = F)\nX-squared = 1.9866, df = 3, p-value = 0.5752"
  },
  {
    "objectID": "r_training/we_heart_janitor.html#chisq.test-1",
    "href": "r_training/we_heart_janitor.html#chisq.test-1",
    "title": "We ❤️ janitor",
    "section": "chisq.test",
    "text": "chisq.test\n\ntitanic &lt;- data.frame(Died  = c(122,167,528,673),\n                  Survived  = c(203,118,178,212),\n                  row.names = c(\"1st class\", \"2nd class\", \"3rd class\", \"crew\"))\n\nchisq.test(titanic)\n\n\n    Pearson's Chi-squared test\n\ndata:  titanic\nX-squared = 190.4, df = 3, p-value &lt; 2.2e-16"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KIND training",
    "section": "",
    "text": "This is a set of training materials supporting the KIND network’s series of one-off training sessions."
  },
  {
    "objectID": "index.html#thanks",
    "href": "index.html#thanks",
    "title": "KIND training",
    "section": "Thanks",
    "text": "Thanks\nThese materials owe a huge debt to the many members of the KIND community who have contributed. More specifically, these pages are based on Melissa Van Bussell’s video describing, with absolute clarity, how to deploy Quarto websites to GitHub pages."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "These pages contain links and resources for our one-off training sessions. You can also find links to our main multi-session training courses via our TURAS page. All our sessions are:\n\nlive and practical/interactive. They aren’t scripted, and they prioritise Q&A, working through the material, and collective problem-solving\nfree to attend\nopen to all\naimed at members of the KIND workforce across Scotland’s health, social care, and housing sector"
  },
  {
    "objectID": "about.html#about-these-pages",
    "href": "about.html#about-these-pages",
    "title": "About",
    "section": "",
    "text": "These pages contain links and resources for our one-off training sessions. You can also find links to our main multi-session training courses via our TURAS page. All our sessions are:\n\nlive and practical/interactive. They aren’t scripted, and they prioritise Q&A, working through the material, and collective problem-solving\nfree to attend\nopen to all\naimed at members of the KIND workforce across Scotland’s health, social care, and housing sector"
  },
  {
    "objectID": "about.html#about-the-kind-learning-network",
    "href": "about.html#about-the-kind-learning-network",
    "title": "About",
    "section": "About the KIND learning network",
    "text": "About the KIND learning network\nThe KIND learning network is an inclusive and supportive community of practice for staff across the knowledge, information, and data workforce. It exists to further the leading role of the community in the digital transformation of health and care by supporting learning, sharing of best practice, and developing interdisciplinary collaborations."
  },
  {
    "objectID": "about.html#what-does-kind-stand-for",
    "href": "about.html#what-does-kind-stand-for",
    "title": "About",
    "section": "What does KIND stand for?",
    "text": "What does KIND stand for?\nKIND = Knowledge, Information, and Data.\nThese topics roughly correspond to three main professional groups:\n\nthose who work with data and/or information\nthose working in knowledge management, research & development, and libraries\nthose working in records"
  },
  {
    "objectID": "about.html#who-is-the-kind-network-for",
    "href": "about.html#who-is-the-kind-network-for",
    "title": "About",
    "section": "Who is the KIND network for?",
    "text": "Who is the KIND network for?\nThe KIND network is open to everyone, but is particularly aimed at staff from Scotland’s health, social care, and housing workforce who are interested in developing their knowledge, information, and data skills."
  },
  {
    "objectID": "about.html#what-does-the-kind-network-do",
    "href": "about.html#what-does-the-kind-network-do",
    "title": "About",
    "section": "What does the KIND network do?",
    "text": "What does the KIND network do?\nThe KIND network does three main things:\n\nWe provide a range of training courses aimed at developing specialist professional skills. For example, we run Excel, Power BI, and R training courses at a range of levels. All our courses are free to access.\nWe provide a social learning space in the Teams channel, with a range of events aimed at different aspects of this area of work. For example, we run a weekly topic-based community meetup session and a mentoring scheme.\nWe work with key national stakeholders to support and champion these training and learning activities. For example, we are currently developing resources to support analysts transitioning to R.\n\nAll these activities are responsive to your needs. If you feel there’s an important area of relevant work where we are not contributing, please get in touch."
  },
  {
    "objectID": "about.html#who-runsownsfunds-the-kind-network",
    "href": "about.html#who-runsownsfunds-the-kind-network",
    "title": "About",
    "section": "Who runs/owns/funds the KIND network?",
    "text": "Who runs/owns/funds the KIND network?\nThe KIND Learning Network is based at NHS Education for Scotland, as part of the Digitally Enabled Workforce programme. That’s a programme that builds foundational resources to support digital skills and leadership at all levels. You might have heard about our Professional Development Award in Technology Enabled Care programme, used the M365 Skills Hub, or been involved with the Digital Leadership Programme. This work is all funded through Scottish Government via the Digital Health and Care Portfolio Board."
  },
  {
    "objectID": "about.html#why-does-the-kind-network-exist",
    "href": "about.html#why-does-the-kind-network-exist",
    "title": "About",
    "section": "Why does the KIND network exist?",
    "text": "Why does the KIND network exist?\nThis network exists to support people who work with knowledge, information, and data as they work to transform health and social care. There’s a large (and growing) workforce responsible for this work in Scotland. However, this workforce is really diverse. It’s not like e.g. nursing or other NMHAP professions where there are fixed entry and promotion criteria. Professional development is more complicated and messy than that. A good example is the lack of standardised job titles for KIND workers. We currently have something like 350 different job titles in the Teams channel. That splitting up of job families contributes to KIND workers being less visible than I think they should be. Kathleen Grey and colleagues called them “ghosts in the machine”"
  },
  {
    "objectID": "about.html#where-does-kind-work-happen",
    "href": "about.html#where-does-kind-work-happen",
    "title": "About",
    "section": "Where does KIND work happen?",
    "text": "Where does KIND work happen?\nKIND work happens in many places across health and social care in Scotland. For example, you might find KIND workers in NHS Boards (national or territorial), other governmental health bodies, Local Authorities, social care care organisations, higher education, in the private sector, professional associations, or in health and social care partnerships"
  },
  {
    "objectID": "about.html#help-i-have-an-unmet-query",
    "href": "about.html#help-i-have-an-unmet-query",
    "title": "About",
    "section": "Help! I have an unmet query…",
    "text": "Help! I have an unmet query…\n\nTeams channel link = Mailing list link\nFor anything, please contact Brendan Clarke (brendan.clarke2@nhs.scot)."
  },
  {
    "objectID": "r_main.html",
    "href": "r_main.html",
    "title": "R training",
    "section": "",
    "text": "Dates and times with lubridate.\nWe (heart) janitor"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html",
    "href": "r_training/dates_and_times_with_lubridate.html",
    "title": "Dates and times with lubridate",
    "section": "",
    "text": "Slides"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#word-of-warning",
    "href": "r_training/dates_and_times_with_lubridate.html#word-of-warning",
    "title": "Dates and times with lubridate",
    "section": "Word of warning",
    "text": "Word of warning\n\ndates and times are hard everywhere\nR is no exception\nthis session is a beginner’s guide to lubridate\n\nnot the only way of dealing with dates\nnot always the best\non balance the most consistent, and least quirky tools for dates"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#this-session",
    "href": "r_training/dates_and_times_with_lubridate.html#this-session",
    "title": "Dates and times with lubridate",
    "section": "This session",
    "text": "This session\n\nbeginner-friendly\nfocus on core parsing, get/set, and rounding functions\nlots on dates, a bit of date-times, no times\n\n\nResources\n\nlibrary(lubridate)\n\n\nLubridate cheatsheet\nR4DS 2e chapter on dates and times\nquick primer on ISO8601"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#r-dates",
    "href": "r_training/dates_and_times_with_lubridate.html#r-dates",
    "title": "Dates and times with lubridate",
    "section": "R dates",
    "text": "R dates\n\ndays since 1970-01-01\n\n\nas_date(0)\n\n[1] \"1970-01-01\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#r-dates-1",
    "href": "r_training/dates_and_times_with_lubridate.html#r-dates-1",
    "title": "Dates and times with lubridate",
    "section": "R dates",
    "text": "R dates\n\nas_date(19860)\n\n[1] \"2024-05-17\"\n\nas_date(1:5)\n\n[1] \"1970-01-02\" \"1970-01-03\" \"1970-01-04\" \"1970-01-05\" \"1970-01-06\"\n\nclass(as_date(0))\n\n[1] \"Date\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#famously",
    "href": "r_training/dates_and_times_with_lubridate.html#famously",
    "title": "Dates and times with lubridate",
    "section": "Famously…",
    "text": "Famously…\n\nas_datetime(2 ^ 31-1) # 32 bit signed int\n\n[1] \"2038-01-19 03:14:07 UTC\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#parsing-dates-is-important",
    "href": "r_training/dates_and_times_with_lubridate.html#parsing-dates-is-important",
    "title": "Dates and times with lubridate",
    "section": "Parsing dates is important",
    "text": "Parsing dates is important\n\nmost functions that accept dates (like ggplot) will mis-behave if you feed them date-shaped-words\n\ne.g. alphabetically-ordered dates\n\nwe also want to be able to calculate with dates"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#couple-of-fun-intro-functions",
    "href": "r_training/dates_and_times_with_lubridate.html#couple-of-fun-intro-functions",
    "title": "Dates and times with lubridate",
    "section": "Couple of fun intro functions",
    "text": "Couple of fun intro functions\n\ntoday()\n\n[1] \"2024-06-11\"\n\ndate_decimal(2024.37534)\n\n[1] \"2024-05-17 08:59:11 UTC\"\n\nnow()\n\n[1] \"2024-06-11 09:58:17 UTC\"\n\nnow(\"Japan\")\n\n[1] \"2024-06-11 18:58:17 JST\"\n\nrandom_zone &lt;- sample(OlsonNames(), 1)\ncat(paste(\"The date-time in\", random_zone, \"is\", now(sample(OlsonNames(), 1))))\n\nThe date-time in Indian/Chagos is 2024-06-11 04:58:17"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#parsing",
    "href": "r_training/dates_and_times_with_lubridate.html#parsing",
    "title": "Dates and times with lubridate",
    "section": "Parsing",
    "text": "Parsing\n\nas_date() is fine assuming you have your date as a number of days\nbut usually, we’ll need to parse our dates\n\n\nas_date(45429) # excel-format 1900 date\n\n[1] \"2094-05-19\"\n\nas_date(45429 - 25569) # dirty but effective\n\n[1] \"2024-05-17\"\n\nas_date(45429, origin = \"1899-12-30\") # better\n\n[1] \"2024-05-17\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#parsing-1",
    "href": "r_training/dates_and_times_with_lubridate.html#parsing-1",
    "title": "Dates and times with lubridate",
    "section": "Parsing",
    "text": "Parsing\n\nmore often, we’ll be taking human-readable dates and parsing them\nthat’s a pain, because there are loads of inconsistent ways of representing dates\nworse, lots of dates are ambiguous (5/6/24 and 6/5/24 might refer to the same day)\n\n\ndate_input &lt;- c(\"17/5/24\", \"2024-05-17\", \"Friday 17th May 2024\", \"17*May*24\", \"5/17/2024\" )\n\nas_date(date_input) # as_date expects ISO-8601ish dates\n\n[1] \"2017-05-24\" \"2024-05-17\" NA           \"2017-05-24\" NA          \n\n# one correct, two silently incorrent, two NAs"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#parse_date_time",
    "href": "r_training/dates_and_times_with_lubridate.html#parse_date_time",
    "title": "Dates and times with lubridate",
    "section": "parse_date_time",
    "text": "parse_date_time\n\nparse_date_time(date_input, orders = \"ymd\")\n\n[1] \"2017-05-24 UTC\" \"2024-05-17 UTC\" NA               \"2017-05-24 UTC\"\n[5] NA              \n\nparse_date_time(date_input, orders = c(\"dmy\", \"ymd\", \"dmy\", \"dmy\", \"mdy\"))\n\n[1] \"2024-05-17 UTC\" \"2024-05-17 UTC\" \"2024-05-17 UTC\" \"2024-05-17 UTC\"\n[5] \"2024-05-17 UTC\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#dmy-and-co",
    "href": "r_training/dates_and_times_with_lubridate.html#dmy-and-co",
    "title": "Dates and times with lubridate",
    "section": "dmy and co",
    "text": "dmy and co\n\nyou can also use the orders (like dmy) as standalone parsing functions:\n\n\ndmy(date_input[c(1,3,4)])\n\n[1] \"2024-05-17\" \"2024-05-17\" \"2024-05-17\"\n\nymd_hms(\"2024-05/17 9-05-01\")\n\n[1] \"2024-05-17 09:05:01 UTC\""
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#so-you-can-make-datesdate-times.-so-what",
    "href": "r_training/dates_and_times_with_lubridate.html#so-you-can-make-datesdate-times.-so-what",
    "title": "Dates and times with lubridate",
    "section": "So you can make dates/date-times. So what?",
    "text": "So you can make dates/date-times. So what?\n\ndate(now())\n\n[1] \"2024-06-11\"\n\nyear(today())\n\n[1] 2024\n\nleap_year(today())\n\n[1] TRUE\n\nquarter(today())\n\n[1] 2\n\nsemester(today())\n\n[1] 1\n\nsemester(today(), with_year = T)\n\n[1] 2024.1"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#months-and-weeks",
    "href": "r_training/dates_and_times_with_lubridate.html#months-and-weeks",
    "title": "Dates and times with lubridate",
    "section": "Months and weeks",
    "text": "Months and weeks\n\nmonth(today())\n\n[1] 6\n\nmonth(today(), label = T)\n\n[1] Jun\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec\n\nweek(today())\n\n[1] 24\n\nepiweek(today()) # special ways of counting weeks. See  https://en.wikipedia.org/wiki/ISO_week_date and https://www.cmmcp.org/mosquito-surveillance-data/pages/epi-week-calendars-2008-2024\n\n[1] 24"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#days",
    "href": "r_training/dates_and_times_with_lubridate.html#days",
    "title": "Dates and times with lubridate",
    "section": "Days",
    "text": "Days\n\nday(today())\n\n[1] 11\n\nwday(today())\n\n[1] 3\n\nqday(today())\n\n[1] 72"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#hour-and-minute",
    "href": "r_training/dates_and_times_with_lubridate.html#hour-and-minute",
    "title": "Dates and times with lubridate",
    "section": "Hour and minute",
    "text": "Hour and minute\n\nhour(now())\n\n[1] 9\n\nminute(now())\n\n[1] 58\n\nam(now())\n\n[1] TRUE\n\ndst(now()) \n\n[1] FALSE"
  },
  {
    "objectID": "r_training/dates_and_times_with_lubridate.html#set",
    "href": "r_training/dates_and_times_with_lubridate.html#set",
    "title": "Dates and times with lubridate",
    "section": "Set",
    "text": "Set\n\nupdate(now(), hour = 11, minute = 0, second = 0) # nominal finish time today\n\n[1] \"2024-06-11 11:00:00 UTC\"\n\n\n\nor, more generally:\n\n\ntest_date &lt;- dmy(\"05/06/23\")\nday(test_date)\n\n[1] 5\n\nday(test_date) &lt;- 11\ntest_date\n\n[1] \"2023-06-11\""
  }
]