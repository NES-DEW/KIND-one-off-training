{
  "hash": "a9802f3fe069de5ffe14e9509da9e024",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A Data-Centric Introduction to Python\nexecute: \n  echo: true\n  output: true\n  freeze: auto\n---\n\n\nA note on this mixed R/Python Quarto file: the text and Python sections were written in a Jupyter notebook, then converted into a Quarto document by:\n\n\n\n```{.default}\nquarto convert a_data_centric_introduction_to_python.ipynb\n```\n\n\nR sections, and the tabsets were added, and the document was then knitted using R Quarto in Rstudio by attaching the @@reticulate package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# A data-centric introduction to Python\n\nThis is a friendly beginner session introducing users to Python. It's health-and-social-care opinionated, assumes no previous Python knowledge, and will have lots of scope for practical demonstrations. Given that lots of users in the KIND network will have some prior experience of R, we'll introduce some key Python features by comparison with R\n\n# Session structure\n\n+ a brief general-purpose chat for intro to the language\n+ how to read and write Python (jupyter/VS Code/Posit workbench/positron)\n+ a side-note about Excel Python\n+ Python for R developers - a practical demonstration\n\n## Python introduction\n+ [\"Python is a high-level, general-purpose programming language.\"](https://en.wikipedia.org/wiki/Python_(programming_language))\n+ massive user-base\n+ highly extensible and flexible ($10^5$ modules)    \n+ the [second-best language for everything](https://www.youtube.com/watch?v=OkuGfa3zcL8)\n+ multi-paradigm (oop, structured, ...)\n\n# Reading and writing Python\n+ you'll need:\n    + Python, [currently at 3.12](https://docs.python.org/release/3.12.4/)\n    + (almost certainly) something to manage modules - like [pip](https://pypi.org/project/pip/) or [conda](https://conda.io/projects/conda/en/latest/user-guide/install/index.html)\n    + (almost certainly) an integrated development environment. Loads of options:\n        + practical demo of [Jupyter labs](https://jupyter.org/)\n        + non-free use in [posit.cloud](https://posit.cloud)\n        + Rstudio via [reticulate](https://cran.r-project.org/web/packages/reticulate/index.html) / Jupyter\n        + [VSCode](https://code.visualstudio.com/), which is pretty well industry standard for the wider Python ecosystem\n        + [positron](https://github.com/posit-dev/positron), which is the new kid for data-flavoured Python work\n\n## Excel Python\n\n+ Python is coming to Excel, apparently...\n    + roll-out slower than expected\n+ gives an alternative to VBA etc\n+ code gets executed in the cloud, so no infrastructure faff...\n    + but a potential information governance headache\n+ on the offchance that you have it available, `=PY()` is the key function\n    + see [\"hello world!\"-type walkthrough](https://support.microsoft.com/en-gb/office/get-started-with-python-in-excel-a33fbcbe-065b-41d3-82cf-23d05397f53d)\n\n## Python for R people\n\nYou're welcome to follow along using the free basic Python set-up at [W3schools](https://www.w3schools.com/python/trypython.asp?filename=demo_default)\n\n+ \"hello world!\"\n+ indents vs brackets\n+ Rmarkdown vs Jupyter\n+ packages vs modules - for data from csv comparison\n+ basic work with tabular data - for methods\n+ vector/tibble/list vs list/tuple/dict/set - for vectorisation vs list comps\n+ pandas for tabular data\n+ plotting comparison\n\n## \"hello world!\"\n\nInitially, there's very little to choose between R and Python, and everything is likely to feel very familiar..\n\n::: {.panel-tabset}\n\n### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"hello world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhello world!\n```\n\n\n:::\n\n```{.python .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3\n```\n\n\n:::\n\n```{.python .cell-code}\nhw = \"hello \" + \"world\" + \"!\"\nhw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'hello world!'\n```\n\n\n:::\n:::\n\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"hello world\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello world\"\n```\n\n\n:::\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nhw <- paste(\"hello\", \"world\", \"!\")\nhw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello world !\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## indents\n+ a first big difference: indents *matter* in Python\n+ they're non-optional with proper syntactic function\n    + broadly correspond to curly brackets in R\n\n::: {.panel-tabset}\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nword = \"care\"\n\nif word == \"care\":\n    print(\"I have found someone from care\")\nelse:\n    print(\"No, I haven't found anyone from care\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nI have found someone from care\n```\n\n\n:::\n:::\n\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword <- \"care\"\n\nif (word == \"care\") {\n  print(\"I have found someone from care\")\n} else {\n  print(\"No, I haven't found anyone from care\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I have found someone from care\"\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Rmarkdown/Quarto vs Jupyter\n+ Jupyter provides interactive code- and markdown editing. Compare to the render/knit-based workflow of qmd/Rmd\n+ web-based, so perhaps more like posit.cloud / workbench than Rstudio\n+ comparatively harder to edit .ipynb files than .Rmd/.qmd in other tools\n\n## packages vs modules\nWe'll have a play with [pandas](https://pandas.pydata.org/docs/reference/api/pandas.Index.html) - one of the main modules for working with tabular data\n\n\n\n::: {.panel-tabset}\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw_dat = \"https://raw.githubusercontent.com/NES-DEW/KIND-community-standards/main/data/KIND_book_of_the_week.csv\"\n\nimport pandas\nbotw = pandas.read_csv(botw_dat)\n\n# one minor bit of cheating - we'll coerce the Year column to numeric\nbotw = botw.replace(\"1979 (1935)\", 1979)\nbotw[\"Year\"] = pandas.to_numeric(botw[\"Year\"])\n```\n:::\n\n\nBut we also have a lot of options for loading modules. We can alias, most usefully to give us short names for commonly-used functions:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nbotw = pd.read_csv(botw_dat)\n```\n:::\n\n\nWe could even load an individual function from a module:\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pandas import read_csv as read_csv\nbotw = read_csv(botw_dat)\n```\n:::\n\n\n### R\n\n:::\n\n## Fun with tabular data\n+ doing some basic playing with our tabular data shows methods - like a local version of a functions\n+ both [`shape`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html) and [`index`](https://pandas.pydata.org/docs/reference/api/pandas.Index.html) are methods that we've imported from pandas. They'll only work in pandas objects, which we'll talk about more below.\n\n::: {.panel-tabset}\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.shape # shape is a method\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(15, 8)\n```\n\n\n:::\n\n```{.python .cell-code}\nlen(botw.index) # as is index\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n15\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.shape[0] # Python is 0-indexed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n15\n```\n\n\n:::\n:::\n\n\n### R\n\n:::\n\n\n## Data types\n\n::: {.panel-tabset}\n### Python\n\n+ there are four basic data types - list/tuple/dict/set\n+ this can be an area of pain for some learners\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers_list = [1,2,3,4,5] # changeable\nnumbers_tuple = (1,2,3,4,5) # unchangeable\nnumbers_dict = {\"one\":1, \"two\":2, \"three\":3} # changeable (now), no duplicates\nnumbers_set = {1,2,3,4,5} # unchangeable, no duplicates\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Modify in place semantics\nnumbers_list.reverse()\n```\n:::\n\n\n### R\n\n:::\n\n## No vectorisation!\nYou'll need to use loops, or (much nicer) list comprehension\n\n## Loops\n\n::: {.panel-tabset}\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndouble_numbers_loop = []\n\nfor n in numbers_list:\n    double_numbers_loop.append(n * 2)\n\ndouble_numbers_loop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[10, 8, 6, 4, 2]\n```\n\n\n:::\n:::\n\n\n## List comprehension\nLike a lovely lightweight loop syntax\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndouble_numbers_list =  [n*2 for n in numbers_list]\ndouble_numbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[10, 8, 6, 4, 2]\n```\n\n\n:::\n\n```{.python .cell-code}\n# and, more fancy...\ndouble_even_numbers_list =  [n*2 for n in numbers_list if (n%2 == 0) ]\ndouble_even_numbers_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[8, 4]\n```\n\n\n:::\n:::\n\n\n### R\n\n:::\n\n## Tabular data basics\n\n::: {.panel-tabset}\n### Python\n\n+ we'll do a quick overview of pandas, based on [their excellent 10 minute overview](https://pandas.pydata.org/docs/user_guide/10min.html)\n+ our `botw` object is a DataFrame, which is based on a dict\n    + like tibbles, DataFrames can contain columns of different types\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date  ...                                        Description\n0  06/03/2024  ...  The Code Book: The Secret History of Codes and...\n1  13/03/2024  ...  Here's a book of the week suggestion following...\n2  20/03/2024  ...                                                NaN\n3  27/03/2024  ...                                                NaN\n4  24/04/2024  ...  We're looking at regular expressions in the co...\n\n[5 rows x 8 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.index # effectively rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRangeIndex(start=0, stop=15, step=1)\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['Date', 'Author', 'Year', 'Title', 'ISBN', 'Worldcat',\n       'KnowledgeNetwork', 'Description'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               ISBN\ncount  1.500000e+01\nmean   9.781178e+12\nstd    6.665700e+08\nmin    9.780140e+12\n25%    9.780577e+12\n50%    9.781473e+12\n75%    9.781813e+12\nmax    9.781857e+12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw.sort_values(\"Year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date  ...                                        Description\n9   29/05/2024  ...  If last week's book was a paean to the use of ...\n2   20/03/2024  ...                                                NaN\n6   08/05/2024  ...  After the discussion last week about the troub...\n0   06/03/2024  ...  The Code Book: The Secret History of Codes and...\n12  19/06/2024  ...  Last week's recommendation about agnotology sp...\n13  26/06/2024  ...  We're still on a mini-exploration of manufactu...\n10  05/06/2024  ...  It's now close to twenty years old, and deals ...\n7   15/05/2024  ...  If I was posh enough to have a Latin motto, it...\n1   13/03/2024  ...  Here's a book of the week suggestion following...\n11  12/06/2024  ...  While the word [agnotology](https://simple.wik...\n3   27/03/2024  ...                                                NaN\n4   24/04/2024  ...  We're looking at regular expressions in the co...\n8   22/05/2024  ...  A love-letter to the power of domain knowledge...\n14  03/07/2024  ...  This week's BotW suggestion comes from Anna Sc...\n5   01/05/2024  ...  Anyone who works with data knows that our data...\n\n[15 rows x 8 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbotw[\"Date\"] # selecting a column and creating a series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0     06/03/2024\n1     13/03/2024\n2     20/03/2024\n3     27/03/2024\n4     24/04/2024\n5     01/05/2024\n6     08/05/2024\n7     15/05/2024\n8     22/05/2024\n9     29/05/2024\n10    05/06/2024\n11    12/06/2024\n12    19/06/2024\n13    26/06/2024\n14    03/07/2024\nName: Date, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[2:4] # subsetting by index using a slice and returning a DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date          Author  ... KnowledgeNetwork Description\n2  20/03/2024   David Oldroyd  ...              NaN         NaN\n3  27/03/2024  Katrine Marçal  ...              NaN         NaN\n\n[2 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[[\"Date\"]] # subsetting columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date\n0   06/03/2024\n1   13/03/2024\n2   20/03/2024\n3   27/03/2024\n4   24/04/2024\n5   01/05/2024\n6   08/05/2024\n7   15/05/2024\n8   22/05/2024\n9   29/05/2024\n10  05/06/2024\n11  12/06/2024\n12  19/06/2024\n13  26/06/2024\n14  03/07/2024\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.loc[4] # subsetting by index using a slice and returning a series\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDate                                                       24/04/2024\nAuthor                                                       Tom Lean\nYear                                                             2016\nTitle               Electronic Dreams: How 1980s Britain Learned t...\nISBN                                                    9781472918338\nWorldcat                  https://search.worldcat.org/title/907966036\nKnowledgeNetwork                                                  NaN\nDescription         We're looking at regular expressions in the co...\nName: 4, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.loc[4, [\"Author\", \"Year\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAuthor    Tom Lean\nYear          2016\nName: 4, dtype: object\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# botw[botw[\"Year\"] > 2010].sort_values(\"Year\")\n\nbotw[botw[\"Author\"].isin([\"Katrine Marçal\", \"Caroline Criado Perez\"])]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date  ...                                        Description\n3  27/03/2024  ...                                                NaN\n5  01/05/2024  ...  Anyone who works with data knows that our data...\n\n[2 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw.dropna() # removes any missing\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Date  ...                                        Description\n11  12/06/2024  ...  While the word [agnotology](https://simple.wik...\n14  03/07/2024  ...  This week's BotW suggestion comes from Anna Sc...\n\n[2 rows x 8 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nbotw[\"Title\"].str.lower()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n0                                         the code book\n1                                    ghost in the wires\n2                                 the arch of knowledge\n3                        who cooked adam smith's dinner\n4     electronic dreams: how 1980s britain learned t...\n5     invisible women: exposing data bias in a world...\n6                        the mismeasure of man (2nd ed)\n7        being wrong: adventures in the margin of error\n8     bad blood: secrets and lies in a silicon valle...\n9          genesis and development of a scientific fact\n10    in the beginning was the worm : finding the se...\n11                                   merchants of doubt\n12    harvey's heart: the discovery of blood circula...\n13    dark remedy: the impact of thalidomide and its...\n14                                how emotions are made\nName: Title, dtype: object\n```\n\n\n:::\n\n```{.python .cell-code}\n\nbotw[\"Date\"] = pd.to_datetime(botw[\"Date\"],format='%d/%m/%Y')\n\n# botw.groupby(pd.DatetimeIndex(botw['Date']).month)[[\"Year\"]].count() # average year of publication by month of botw\n```\n:::\n\n\n### R\n\n:::\n \n## Plots\n\n::: {.panel-tabset}\n### Python\n\n\nUsing [matplotlib](https://matplotlib.org/3.1.1/index.html)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.hist(botw[\"Year\"], bins = 5)\n\nplt.title(\"The KIND network BotW is biased towards newer books\")\n```\n\n::: {.cell-output-display}\n![](a_data_centric_introduction_to_python_pg_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### R\n\n:::\n",
    "supporting": [
      "a_data_centric_introduction_to_python_pg_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}